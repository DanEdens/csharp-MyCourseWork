<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NFluent</name>
    </assembly>
    <members>
        <member name="T:NFluent.ApiChecks.ExceptionChecks">
            <summary>
                This class hosts extensions methods related to exception related checks for APIs/lib.
            </summary>
        </member>
        <member name="M:NFluent.ApiChecks.ExceptionChecks.AndWhichMessage``1(NFluent.ILambdaExceptionCheck{``0})">
            <summary>
            Provides access to the error message of the exception.
            </summary>
            <typeparam name="T"> Exception type.
            </typeparam>
            <param name="check">
            Exception checker.
            </param>
            <returns>
            A string checker.
            </returns>
        </member>
        <member name="T:NFluent.Check">
            <summary>
            Provides <see cref="T:NFluent.ICheck`1"/> instances to be used in order to make 
            check(s) on the provided value.
            </summary>
        </member>
        <member name="M:NFluent.Check.That``1(``0)">
            <summary>
            Returns a <see cref="T:NFluent.ICheck`1" /> instance that will provide check methods to be executed on a given value.
            </summary>
            <typeparam name="T">Type of the value to be tested.</typeparam>
            <param name="value">The value to be tested.</param>
            <returns>
            A <see cref="T:NFluent.ICheck`1" /> instance to use in order to check things on the given value.
            </returns>
            <remarks>
            Every method of the returned <see cref="T:NFluent.ICheck`1" /> instance will throw a <see cref="T:NFluent.FluentCheckException" /> when failing.
            </remarks>
        </member>
        <member name="M:NFluent.Check.ThatCode(NFluent.Action)">
            <summary>
            Returns a <see cref="T:NFluent.ICheck`1" /> instance that will provide check methods to be executed on a given value.
            </summary>
            <param name="value">The code to be tested.</param>
            <returns>
            A <see cref="T:NFluent.ICheck`1" /> instance to use in order to assert things on the given value.
            </returns>
            <remarks>
            Every method of the returned <see cref="T:NFluent.ICheck`1" /> instance will throw a <see cref="T:NFluent.FluentCheckException" /> when failing.
            </remarks>
        </member>
        <member name="M:NFluent.Check.ThatCode``1(NFluent.Func{``0})">
            <summary>
            Returns a <see cref="T:NFluent.ICheck`1" /> instance that will provide check methods to be executed on a lambda.
            </summary>
            <typeparam name="TU">Result type of the function.</typeparam>
            <param name="value">The code to be tested.</param>
            <returns>
            A <see cref="T:NFluent.ICheck`1" /> instance to use in order to assert things on the lambda.
            </returns>
            <remarks>
            Every method of the returned <see cref="T:NFluent.ICheck`1" /> instance will throw a <see cref="T:NFluent.FluentCheckException" /> when failing.
            </remarks>
        </member>
        <member name="M:NFluent.Check.That``1">
            <summary>
            Returns a <see cref="T:NFluent.ICheck`1"/> instance that will provide check method on a type.
            </summary>
            <typeparam name="T">Type to be tested.</typeparam>
            <returns>
            A <see cref="T:NFluent.ICheck`1" /> instance to use in order to assert things on the given test.
            </returns>
        </member>
        <member name="M:NFluent.Check.ThatEnum``1(``0)">
            <summary>
            Returns a <see cref="T:NFluent.IStructCheck`1" /> instance that will provide check methods to be executed on a given enum or struct value.
            </summary>
            <typeparam name="T">Type of the enum or structure value to be tested.</typeparam>
            <param name="value">The value to be tested.</param>
            <returns>
            A <see cref="T:NFluent.IStructCheck`1" /> instance to use in order to assert things on the given enum or struct value.
            </returns>
            <remarks>
            Every method of the returned <see cref="T:NFluent.IStructCheck`1" /> instance will throw a <see cref="T:NFluent.FluentCheckException" /> when failing.
            </remarks>
        </member>
        <member name="P:NFluent.Check.EqualMode">
            <summary>
            Gets/sets how equality comparison are done.
            </summary>
        </member>
        <member name="P:NFluent.Check.Reporter">
            <summary>
            Gets or sets the default error report
            </summary>
        </member>
        <member name="P:NFluent.Check.StringTruncationLength">
            <summary>
            Gets/Sets the truncation length for long string.
            </summary>
        </member>
        <member name="T:NFluent.BooleanCheckExtensions">
            <summary>
            Provides check methods to be executed on a boolean value.
            </summary>
        </member>
        <member name="M:NFluent.BooleanCheckExtensions.IsTrue(NFluent.ICheck{System.Boolean})">
            <summary>
            Checks that the actual value is true.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The actual value is not true.</exception>
        </member>
        <member name="M:NFluent.BooleanCheckExtensions.IsFalse(NFluent.ICheck{System.Boolean})">
            <summary>
            Checks that the actual value is false.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The actual value is not false.</exception>
        </member>
        <member name="T:NFluent.CharCheckExtensions">
            <summary>
                Provides check methods to be executed on a char value.
            </summary>
        </member>
        <member name="M:NFluent.CharCheckExtensions.IsALetter(NFluent.ICheck{System.Char})">
            <summary>
            Checks that the checked <see cref="T:System.Char" /> is a letter.
            </summary>
            <param name="check">The chained fluent check.</param>
            <exception cref="T:NFluent.FluentCheckException">The checked <see cref="T:System.Char" /> is not a letter.</exception>
            <returns>A check link.</returns>
        </member>
        <member name="M:NFluent.CharCheckExtensions.IsADigit(NFluent.ICheck{System.Char})">
            <summary>
                Checks that the checked <see cref="T:System.Char" /> is a decimal digit.
            </summary>
            <param name="check">The chained fluent check.</param>
            <exception cref="T:NFluent.FluentCheckException">The checked <see cref="T:System.Char" /> is not a decimal digit.</exception>
            <returns>A check link.</returns>
        </member>
        <member name="M:NFluent.CharCheckExtensions.IsAPunctuationMark(NFluent.ICheck{System.Char})">
            <summary>
            Checks that the checked <see cref="T:System.Char" /> is a punctuation mark.
            </summary>
            <param name="check">The chained fluent check.</param>
            <exception cref="T:NFluent.FluentCheckException">The checked <see cref="T:System.Char" /> is not a punctuation mark.</exception>
            <returns>A check link.</returns>
        </member>
        <member name="M:NFluent.CharCheckExtensions.IsSameLetterAs(NFluent.ICheck{System.Char},System.Char)">
            <summary>
                Checks that the checked <see cref="T:System.Char" /> and the given one are the same letter, whatever the case.
            </summary>
            <param name="check">The chained fluent check.</param>
            <param name="otherChar">The other char that.</param>
            <exception cref="T:NFluent.FluentCheckException">
                The checked <see cref="T:System.Char" /> is not the same letter as the expected one,
                whatever the case.
            </exception>
            <returns>A check link.</returns>
        </member>
        <member name="M:NFluent.CharCheckExtensions.IsSameLetterButWithDifferentCaseAs(NFluent.ICheck{System.Char},System.Char)">
            <summary>
                Checks that the checked <see cref="T:System.Char" /> is the same letter as the other, but with different case only.
            </summary>
            <param name="check">The chained fluent check.</param>
            <param name="otherChar">The other char that.</param>
            <exception cref="T:NFluent.FluentCheckException">
                The checked <see cref="T:System.Char" /> is not the same as the expected one, or is the
                same but with the same case.
            </exception>
            <returns>A check link.</returns>
        </member>
        <member name="T:NFluent.CodeCheckExtensions">
            <summary>
            Static class hosting extension methods in relation with checks for code.
            </summary>
        </member>
        <member name="M:NFluent.CodeCheckExtensions.LastsLessThan``1(NFluent.ICodeCheck{``0},System.Double,NFluent.TimeUnit)">
            <summary>
            Checks that the execution time is below a specified threshold.
            </summary>
            <typeparam name="T">Type of the checked type.</typeparam>
            <param name="check">The fluent check to be extended.
            </param>
            <param name="threshold">
            The threshold.
            </param>
            <param name="timeUnit">
            The time unit of the given threshold.
            </param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">
            Execution was strictly above limit.
            </exception>
        </member>
        <member name="M:NFluent.CodeCheckExtensions.ConsumesLessThan``1(NFluent.ICodeCheck{``0},System.Double,NFluent.TimeUnit)">
            <summary>
            Checks that the CPU time is below a specified threshold.
            </summary>
            <typeparam name="T">Type of the checked type.</typeparam>
            <param name="check">The fluent check to be extended.
            </param>
            <param name="threshold">
            The threshold.
            </param>
            <param name="timeUnit">
            The time unit of the given threshold.
            </param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">
            Execution was strictly above limit.
            </exception>
        </member>
        <member name="M:NFluent.CodeCheckExtensions.DoesNotThrow``1(NFluent.ICodeCheck{``0})">
            <summary>
            Check that the code does not throw an exception.
            </summary>
            <param name="check">The fluent check to be extended.
            </param>
            <typeparam name="T">Inferred type of the code.</typeparam>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The code raised an exception.</exception>
        </member>
        <member name="M:NFluent.CodeCheckExtensions.Throws``1(NFluent.ICodeCheck{NFluent.RunTrace})">
            <summary>
            Checks that the code did throw an exception of a specified type.
            </summary>
            <typeparam name="T">Expected exception type.</typeparam>
            <param name="check">The fluent check to be extended.
            </param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The code did not raised an exception of the specified type, or did not raised an exception at all.</exception>
        </member>
        <member name="M:NFluent.CodeCheckExtensions.ThrowsType(NFluent.ICodeCheck{NFluent.RunTrace},System.Type)">
            <summary>
            Checks that the code did throw an exception of a specified type.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <param name="exceptionType">Expected exception type.</param>
            <returns>A check link.</returns>
        </member>
        <member name="M:NFluent.CodeCheckExtensions.ThrowsAny(NFluent.ICodeCheck{NFluent.RunTrace})">
            <summary>
            Checks that the code did throw an exception of a specified type.
            </summary>
            <param name="check">
            The fluent check to be extended.
            </param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">
            The code did not raised an exception of the specified type, or did not raised an exception at all.
            </exception>
        </member>
        <member name="M:NFluent.CodeCheckExtensions.WhichResult``1(NFluent.ICodeCheck{NFluent.RunTraceResult{``0}})">
            <summary>
            Allows to perform checks on the result value.
            </summary>
            <typeparam name="T">Type of the code result. Should be inferred.</typeparam>
            <param name="check">The fluent check to be extended.</param>
            <returns>A check object for the result.</returns>
        </member>
        <member name="T:NFluent.ComparableCheckExtensions">
            <summary>
            Provides check methods to be executed on an <see cref="T:System.IComparable"/> instance.
            </summary>
        </member>
        <member name="M:NFluent.ComparableCheckExtensions.IsBefore(NFluent.ICheck{System.IComparable},System.IComparable)">
            <summary>
            Determines whether the specified value is before the other one.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <param name="givenValue">The other value.</param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The current value is not before the other one.</exception>
        </member>
        <member name="M:NFluent.ComparableCheckExtensions.IsAfter(NFluent.ICheck{System.IComparable},System.IComparable)">
            <summary>
            Determines whether the specified value is after the other one.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <param name="givenValue">The other value.</param> a
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The current value is not after the other one.</exception>
        </member>
        <member name="T:NFluent.Extensibility.CheckLogicExtensions">
            <summary>
            Hosts extensions methods for IChecKLogic
            </summary>
        </member>
        <member name="M:NFluent.Extensibility.CheckLogicExtensions.FailWhen``1(NFluent.Extensibility.ICheckLogic{``0},NFluent.Func{``0,System.Boolean},System.String,NFluent.Extensibility.MessageOption)">
            <summary>
            Failing condition
            </summary>
            <param name="logic"></param>
            <param name="predicate">Predicate, returns true if test fails.</param>
            <param name="error">Error message on failure</param>
            <param name="newOptions"></param>
            <returns>Continuation object.</returns>
        </member>
        <member name="M:NFluent.Extensibility.CheckLogicExtensions.FailIfNull``1(NFluent.Extensibility.ICheckLogic{``0},System.String)">
            <summary>
            Fails the check is the checked value is null,
            </summary>
            <param name="logic"></param>
            <param name="error">Error message</param>
            <typeparam name="T">type of the checked object</typeparam>
            <returns>Continuation object.</returns>
        </member>
        <member name="M:NFluent.Extensibility.CheckLogicExtensions.OnNegate``1(NFluent.Extensibility.ICheckLogic{``0},System.String,NFluent.Extensibility.MessageOption)">
            <summary>
            Error message for negated checks.
            </summary>
            <param name="logic">check</param>
            <param name="message">Message template to use when check succeeds.</param>
            <param name="option"></param>
            <typeparam name="T">type of the checked object</typeparam>
            <returns>Continuation object.</returns>
        </member>
        <member name="M:NFluent.Extensibility.CheckLogicExtensions.CantBeNegated``1(NFluent.Extensibility.ICheckLogic{``0})">
            <summary>
            Generate an error message stating that this check cannot be used with <see cref="P:NFluent.INegateableCheck`1.Not"/>
            </summary>
            <typeparam name="T">type of the checked object</typeparam>
            <param name="logic">check</param>
            <returns></returns>
        </member>
        <member name="T:NFluent.Extensibility.IErrorReporter">
            <summary>
            Interface implemented by error reporting mecahnism
            </summary>
        </member>
        <member name="M:NFluent.Extensibility.IErrorReporter.ReportError(System.String)">
            <summary>
            Reports an error message.
            </summary>
            <param name="message">error message.</param>
        </member>
        <member name="T:NFluent.Extensibility.MessageOption">
            <summary>
            Options for message generation.
            </summary>
        </member>
        <member name="F:NFluent.Extensibility.MessageOption.None">
            <summary>
            No specific option
            </summary>
        </member>
        <member name="F:NFluent.Extensibility.MessageOption.NoCheckedBlock">
            <summary>
            Removes the description block for the checked value or sut
            </summary>
        </member>
        <member name="F:NFluent.Extensibility.MessageOption.NoExpectedBlock">
            <summary>
            Removes the description block for the expected value(s)
            </summary>
        </member>
        <member name="F:NFluent.Extensibility.MessageOption.ForceType">
            <summary>
            Forces the sut type
            </summary>
        </member>
        <member name="F:NFluent.Extensibility.MessageOption.WithType">
            <summary>
            Add type info
            </summary>
        </member>
        <member name="F:NFluent.Extensibility.MessageOption.WithHash">
            <summary>
            Add hash for values
            </summary>
        </member>
        <member name="T:NFluent.Extensibility.ICheckLogicBase">
            <summary>
            Minimal interface
            </summary>
        </member>
        <member name="M:NFluent.Extensibility.ICheckLogicBase.EndCheck">
            <summary>
                Ends check.
            </summary>
            <remarks>At this point, exception is thrown.</remarks>
            <returns>true if succesfull</returns>
        </member>
        <member name="P:NFluent.Extensibility.ICheckLogicBase.Failed">
            <summary>
            Gets the failed status.
            </summary>
        </member>
        <member name="T:NFluent.Extensibility.ICheckLogic`1">
            <summary>
            Provides method to ease coding of checks.
            </summary>
        </member>
        <member name="M:NFluent.Extensibility.ICheckLogic`1.Fail(System.String,NFluent.Extensibility.MessageOption)">
            <summary>
            Explicitely fails
            </summary>
            <param name="error">error message</param>
            <param name="options">options</param>
            <returns>Continuation object</returns>
        </member>
        <member name="M:NFluent.Extensibility.ICheckLogic`1.DefineExpectedValue``1(``0,System.String,System.String)">
            <summary>
            Specify expected value.
            </summary>
            <param name="other"></param>
            <param name="comparison"></param>
            <param name="negatedComparison"></param>
            <returns>Continuation object.</returns>
        </member>
        <member name="M:NFluent.Extensibility.ICheckLogic`1.DefineExpectedResult``1(``0,System.String,System.String)">
            <summary>
            Specify the expected results, with full control on error labels.
            </summary>
            <typeparam name="TU">Expected result type.</typeparam>
            <param name="resultValue">Expected result</param>
            <param name="labelForExpected">Label for expected result</param>
            <param name="negationForExpected">Label for result when check is negated</param>
            <returns>Continuation object.</returns>
        </member>
        <member name="M:NFluent.Extensibility.ICheckLogic`1.DefineExpectedValues(System.Collections.IEnumerable,System.Int64,System.String,System.String)">
            <summary>
            Specify that we expect a list of valies
            </summary>
            <param name="values">enumeration of values</param>
            <param name="count">number of items</param>
            <param name="comparison"></param>
            <param name="negatedComparison"></param>
            <returns>Continuation object</returns>
        </member>
        <member name="M:NFluent.Extensibility.ICheckLogic`1.DefineExpectedType(System.Type)">
            <summary>
            Specify that the expectation is an instance of some type
            </summary>
            <param name="expectedInstanteType">expected type</param>
            <returns>Continuation object</returns>
        </member>
        <member name="M:NFluent.Extensibility.ICheckLogic`1.OnNegateWhen(NFluent.Func{`0,System.Boolean},System.String,NFluent.Extensibility.MessageOption)">
            <summary>
            Failing condition on check negation.
            </summary>
            <param name="predicate">Predicate, returns true if test fails.</param>
            <param name="error">Error message on failure</param>
            <param name="options">Options to use on parts of the message</param>
            <returns>Continuation object.</returns>
        </member>
        <member name="M:NFluent.Extensibility.ICheckLogic`1.Analyze(NFluent.Action{`0,NFluent.Extensibility.ICheckLogic{`0}})">
            <summary>
            Executes arbitrary code on the sut.
            </summary>
            <param name="action">Code to be executed</param>
            <returns>Continuation object.</returns>
        </member>
        <member name="M:NFluent.Extensibility.ICheckLogic`1.InvalidIf(NFluent.Func{`0,System.Boolean},System.String)">
            <summary>
            Raises an InvalidOperationException if predicte returns true. 
            </summary>
            <param name="predicate">predicate function</param>
            <param name="error">error message in exception</param>
            <returns>Continuation object.</returns>
        </member>
        <member name="M:NFluent.Extensibility.ICheckLogic`1.SetSutName(System.String)">
            <summary>
            Set the name for the observed system.
            </summary>
            <param name="name">Name to use</param>
            <returns>Continuation object</returns>
        </member>
        <member name="M:NFluent.Extensibility.ICheckLogic`1.CheckSutAttributes``1(NFluent.Func{`0,``0},System.String)">
            <summary>
            Change the value of the sut.
            </summary>
            <param name="sutExtractor">new sut  object.</param>
            <param name="sutLabel">new label</param>
            <returns>Continuation object</returns>
        </member>
        <member name="M:NFluent.Extensibility.ICheckLogic`1.SetValuesIndex(System.Int64)">
            <summary>
            Set index of interest
            </summary>
            <param name="index"></param>
            <returns>Continuation object</returns>
        </member>
        <member name="M:NFluent.Extensibility.ICheckLogic`1.ComparingTo``1(``0,System.String,System.String)">
            <summary>
            Set values to be given.
            </summary>
            <typeparam name="TU">Type of reference values</typeparam>
            <param name="other"></param>
            <param name="comparisonInfo"></param>
            <param name="negatedComparisonInfo"></param>
            <returns></returns>
        </member>
        <member name="T:NFluent.Extensibility.ExtensibilityHelper">
            <summary>
            Helper that allow to extract the checker to be used for and from any given fluent check instance.
            </summary>
        </member>
        <member name="M:NFluent.Extensibility.ExtensibilityHelper.ExtractChecker``1(NFluent.ICheck{``0})">
            <summary>
            Extracts the checker to be used in order to check things on the value contained within
            the given fluent check.
            </summary>
            <typeparam name="T">The type of checked value.</typeparam>
            <param name="check">The fluent check instance to work on.</param>
            <returns>
            The checker to be used to check things on the value contained in the fluent check.
            </returns>
        </member>
        <member name="M:NFluent.Extensibility.ExtensibilityHelper.ExtractCodeChecker``1(NFluent.ICodeCheck{``0})">
            <summary>
            Extracts the code checker.
            </summary>
            <typeparam name="TU">The type of checked value.</typeparam>
            <param name="check">The check.</param>
            <returns>The checker to be used to check things on the value contained in the fluent check.</returns>
        </member>
        <member name="M:NFluent.Extensibility.ExtensibilityHelper.ExtractStructChecker``1(NFluent.IStructCheck{``0})">
            <summary>
            Extracts the checker to be used in order to check things on the struct instance contained within
            the given fluent check.
            </summary>
            <typeparam name="TS">The type of the struct to be checked.</typeparam>
            <param name="check">The fluent check instance to work on.</param>
            <returns>
            The checker to be used to check things on the value contained in the fluent check.
            </returns>
        </member>
        <member name="M:NFluent.Extensibility.ExtensibilityHelper.BuildExtendableCheckLink``2(NFluent.ICheck{``0},``1)">
            <summary>
            Gets an <see cref="T:NFluent.IExtendableCheckLink`2"/> that permits refining checks
            </summary>
            <param name="check">check to extend</param>
            <param name="value">initial operands</param>
            <typeparam name="T">type of checked value</typeparam>
            <typeparam name="TU">Type of comparand for previous check</typeparam>
            <returns>An <see cref="T:NFluent.IExtendableCheckLink`2"/>implementation.</returns>
        </member>
        <member name="M:NFluent.Extensibility.ExtensibilityHelper.BeginCheck``1(NFluent.ICheck{``0})">
            <summary>
            Initiates a check logic chain.
            </summary>
            <typeparam name="T">Type of sut</typeparam>
            <param name="check">The fluent check instance to work on.</param>
            <returns>An <see cref="T:NFluent.Extensibility.ICheckLogic`1"/>instance.</returns>
        </member>
        <member name="M:NFluent.Extensibility.ExtensibilityHelper.BeginCheck``1(NFluent.ICodeCheck{``0})">
            <summary>
            Initiates a check logic chain.
            </summary>
            <typeparam name="T">Type of sut</typeparam>
            <param name="check">The fluent check instance to work on.</param>
            <returns>An <see cref="T:NFluent.Extensibility.ICheckLogic`1"/>instance.</returns>
        </member>
        <member name="M:NFluent.Extensibility.ExtensibilityHelper.BeginCheck``1(NFluent.IStructCheck{``0})">
            <summary>
            Initiates a check logic chain.
            </summary>
            <typeparam name="T">Type of sut</typeparam>
            <param name="check">The fluent check instance to work on.</param>
            <returns>An <see cref="T:NFluent.Extensibility.ICheckLogic`1"/>instance.</returns>
        </member>
        <member name="M:NFluent.Extensibility.ExtensibilityHelper.BeginCheck``1(NFluent.Kernel.FluentSut{``0})">
            <summary>
            Initiates a check logic chain.
            </summary>
            <typeparam name="T">Type of sut</typeparam>
            <param name="sut">The fluent check instance to work on.</param>
            <returns>An <see cref="T:NFluent.Extensibility.ICheckLogic`1"/>instance.</returns>
        </member>
        <member name="M:NFluent.Extensibility.ExtensibilityHelper.BuildCheckLink``1(NFluent.ICheck{``0})">
            <summary>
            Builds a chainable object.
            </summary>
            <typeparam name="T">Type of sut</typeparam>
            <param name="check">The fluent check instance to work on.</param>
            <returns>An <see cref="T:NFluent.ICheckLink`1"/> instance to add further checks.</returns>
        </member>
        <member name="M:NFluent.Extensibility.ExtensibilityHelper.BuildCheckLink``1(NFluent.ICodeCheck{``0})">
            <summary>
            Builds a chainable object.
            </summary>
            <typeparam name="T">Type of sut</typeparam>
            <param name="check">The fluent check instance to work on.</param>
            <returns>An <see cref="T:NFluent.ICheckLink`1"/> instance to add further checks.</returns>
        </member>
        <member name="M:NFluent.Extensibility.ExtensibilityHelper.BuildCheckLink``1(NFluent.IStructCheck{``0})">
            <summary>
            Builds a chainable object.
            </summary>
            <typeparam name="T">Type of sut</typeparam>
            <param name="check">The fluent check instance to work on.</param>
            <returns>An <see cref="T:NFluent.ICheckLink`1"/> instance to add further checks.</returns>
        </member>
        <member name="M:NFluent.Extensibility.ExtensibilityHelper.BuildCheckLinkWhich``2(NFluent.ICheck{``0},``1,System.String)">
            <summary>
            Builds a chainable check with a sub item.
            </summary>
            <param name="check">original check to link to</param>
            <param name="item">sub itme that can be check with wich</param>
            <param name="label">label for the sub item</param>
            <typeparam name="TU">type of the sut</typeparam>
            <typeparam name="T">type of the sub item</typeparam>
            <returns>A chainable link supporting Which</returns>
        </member>
        <member name="M:NFluent.Extensibility.ExtensibilityHelper.BuildCheck``2(NFluent.ICodeCheck{``0},NFluent.Func{``0,``1})">
            <summary>
            Builds a check 
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TV"></typeparam>
            <param name="check"></param>
            <param name="extractor"></param>
            <returns></returns>
        </member>
        <member name="T:NFluent.Extensibility.IChecker`2">
            <summary>
            Provides a mean to execute some checks on a value, taking care of whether it should be negated or not, etc.
            This interface is designed for developers that need to add new check (extension) methods.
            Thus, it should not be exposed via Intellisense to developers that are using NFluent to write 
            checks statements.
            </summary>
            <typeparam name="T">
            Type of the value to assert on.
            </typeparam>
            <typeparam name="TC">Interface for the check.
            </typeparam>
        </member>
        <member name="M:NFluent.Extensibility.IChecker`2.BuildChainingObject">
            <summary>
            Gets the check link to return for the next check to be executed (linked with the And operator).
            This property is only useful for those that doesn't want to implement their check methods with the 
            <see cref="M:NFluent.Extensibility.IChecker`2.ExecuteCheck(NFluent.Action,System.String)"/> method.
            </summary>
            <returns>
                The check link to return for next check (linked with the And operator) to be executed.
            </returns>
        </member>
        <member name="M:NFluent.Extensibility.IChecker`2.BuildLinkWhich``1(``0)">
            <summary>
            Gets the check link to return for the next check to be executed (linked with the And operator).
            This property is only useful for those that doesn't want to implement their check methods with the 
            <see cref="M:NFluent.Extensibility.IChecker`2.ExecuteCheck(NFluent.Action,System.String)"/> method.
            </summary>
            <param name="itemChecker">Checker for the sub item to check.</param>
            <typeparam name="TSub">Checker for sub item.</typeparam>
            <returns>
                The check link to return for next check (linked with the And operator) to be executed.
            </returns>
        </member>
        <member name="M:NFluent.Extensibility.IChecker`2.ExecuteCheckAndProvideSubItem``1(NFluent.Func{``0},System.String)">
            <summary>
            Execute the check provided as an happy-path lambda.
            </summary>
            <typeparam name="TSub">Checker type for the sub item.</typeparam>
            <param name="checkLambdaAction">The happy-path action (vs. the one for negated version which has not to be specified). 
                This lambda should simply return if everything is ok, or throws a 
                <see cref="T:NFluent.FluentCheckException"/> otherwise.</param>
            <param name="negatedExceptionMessage">The message for the exception to be thrown when the check fails, in the case we were running the negated version.</param>
            <returns>The <see cref="M:NFluent.Extensibility.IChecker`2.BuildLinkWhich``1(``0)"/> to use for linking.</returns>
        </member>
        <member name="M:NFluent.Extensibility.IChecker`2.ExecuteCheck(NFluent.Action,System.String)">
            <summary>
            Executes the check provided as an happy-path lambda (vs lambda for negated version).
            </summary>
            <param name="action">
                The happy-path action (vs. the one for negated version which has not to be specified). 
                This lambda should simply return if everything is ok, or throws a 
                <see cref="T:NFluent.FluentCheckException"/> otherwise.</param>
            <param name="negatedExceptionMessage">
                The message for the exception to be thrown when the check fails, in the case we were running the negated version.
            </param>
            <returns>
                The <see cref="M:NFluent.Extensibility.IChecker`2.BuildChainingObject"/>.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The check fails.</exception>
        </member>
        <member name="M:NFluent.Extensibility.IChecker`2.ExecuteNotChainableCheck(NFluent.Action,System.String)">
            <summary>
            Executes the check provided as an happy-path lambda (vs lambda for negated version) and returns a not linkable check.
            </summary>
            <param name="action">The happy-path action (vs. the one for negated version which has not to be specified).
            This lambda should simply return if everything is ok, or throws a
            <see cref="T:NFluent.FluentCheckException" /> otherwise.</param>
            <param name="negatedExceptionMessage">The message for the exception to be thrown when the check fails, in the case we were running the negated version.</param>
            <exception cref="T:NFluent.FluentCheckException">The check fails.</exception>
        </member>
        <member name="M:NFluent.Extensibility.IChecker`2.BuildMessage(System.String)">
            <summary>
            Builds an error message.
            </summary>
            <param name="message">The message.</param>
            <returns>A <see cref="T:NFluent.Extensibility.FluentMessage"/> instance.</returns>
        </member>
        <member name="M:NFluent.Extensibility.IChecker`2.BuildShortMessage(System.String)">
            <summary>
            Builds an error message.
            </summary>
            <param name="message">The message.</param>
            <returns>A <see cref="T:NFluent.Extensibility.FluentMessage"/> instance.</returns>
        </member>
        <member name="M:NFluent.Extensibility.IChecker`2.SetSutLabel(System.String)">
            <summary>
            Sets an optional label for the SUT to be used instead of the default one for message generation.
            </summary>
            <param name="sutLabel">The label for the SUT.</param>
        </member>
        <member name="M:NFluent.Extensibility.IChecker`2.BeginCheck">
            <summary>
            Buids an helper object to ease coding of checks.
            </summary>
            <returns>An instance of <see cref="T:NFluent.Extensibility.ICheckLogic`1"/>.</returns>
        </member>
        <member name="T:NFluent.Extensibility.IExposingChecker`2">
            <summary>
            Exposes an executable check for this given type. 
            </summary>
            <typeparam name="T">
            The type of the data to be checked.
            </typeparam>
            <typeparam name="TC">Interface for the check.
            </typeparam>
        </member>
        <member name="P:NFluent.Extensibility.IExposingChecker`2.Checker">
            <summary>
            Gets the runnable check to use for checking something on a value of a given type.
            </summary>
            <value>
            The runnable check to use for checking something on a given type.
            </value>
        </member>
        <member name="T:NFluent.Extensibility.MessageBlock">
            <summary>
            Class describing a message block.
            </summary>
        </member>
        <member name="M:NFluent.Extensibility.MessageBlock.#ctor(NFluent.Extensibility.FluentMessage,System.Object,NFluent.Messages.GenericLabelBlock,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:NFluent.Extensibility.MessageBlock"/> class.
            </summary>
            <param name="message">
            The message.
            </param>
            <param name="test">
            The tested object.
            </param>
            <param name="block">
            The block attribute.
            </param>
            <param name="index">The index for enumerable types</param>
        </member>
        <member name="M:NFluent.Extensibility.MessageBlock.#ctor(NFluent.Extensibility.FluentMessage,System.Type,NFluent.Messages.GenericLabelBlock)">
            <summary>
            Initializes a new instance of the <see cref="T:NFluent.Extensibility.MessageBlock"/> class.
            </summary>
            <param name="message">
            The message.
            </param>
            <param name="type">
            The tested type.
            </param>
            <param name="label">
            The block label.
            </param>
        </member>
        <member name="P:NFluent.Extensibility.MessageBlock.And">
            <summary>
            Gets the Message.
            </summary>
            <value>
            The <see cref="T:NFluent.Extensibility.FluentMessage"/> holding that block.
            </value>
        </member>
        <member name="M:NFluent.Extensibility.MessageBlock.Comparison(System.String)">
            <summary>
            Adds a specific comparison message (e.g 'equal to').
            </summary>
            <param name="comparison">
            The comparison suffix.
            </param>
            <returns>
            The <see cref="T:NFluent.Extensibility.MessageBlock"/> for fluent API.
            </returns>
        </member>
        <member name="M:NFluent.Extensibility.MessageBlock.GetMessage">
            <summary>
            Gets the message as a string.
            </summary>
            <returns>
            A string with the properly formatted message.
            </returns>
        </member>
        <member name="M:NFluent.Extensibility.MessageBlock.Label(System.String)">
            <summary>
            Specifies a specific attribute for the message.
            </summary>
            <param name="newLabel">
            The new attribute.
            </param>
            <returns>
            This <see cref="T:NFluent.Extensibility.MessageBlock"/>.
            </returns>
        </member>
        <member name="M:NFluent.Extensibility.MessageBlock.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:NFluent.Extensibility.MessageBlock.WithEnumerableCount(System.Int64)">
            <summary>
            Adds a description of the number of items (only relevant if the object is an enumerable).
            </summary>
            <param name="itemsCount">
            The number of items of the enumerable instance.
            </param>
            <returns>
            The description of the number of items (only relevant if the object is an enumerable).
            </returns>
        </member>
        <member name="M:NFluent.Extensibility.MessageBlock.WithHashCode(System.Boolean)">
            <summary>
            Requests that the Hash value is included in the description block.
            </summary>
            <param name="active">
            True to include the type. This is the default value.
            </param>
            <returns>
            Returns this instance for chained calls.
            </returns>
        </member>
        <member name="M:NFluent.Extensibility.MessageBlock.WithType(System.Boolean,System.Boolean)">
            <summary>
            Requests that the type is included in the description block.
            </summary>
            <param name="active">
            True to include the type. This is the default value.
            </param>
            <param name="full">
            True to display the full type name (with assembly).
            </param>
            <returns>
            Returns this instance for chained calls.
            </returns>
        </member>
        <member name="M:NFluent.Extensibility.MessageBlock.OfType(System.Type)">
            <summary>
            Requests that a specific type is included in the description block.
            </summary>
            <param name="forcedType">
            Type to include in the description.
            </param>
            <remarks>
            Default type is the type of the object instance given in constructor.
            </remarks>
            <returns>
            Returns this instance for chained calls.
            </returns>
        </member>
        <member name="M:NFluent.Extensibility.MessageBlock.FullLabel">
            <summary>
            The full label.
            </summary>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="T:NFluent.Extensibility.FluentMessage">
            <summary>
            Help to build a properly formatted fluent error message.
            </summary>
        </member>
        <member name="M:NFluent.Extensibility.FluentMessage.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NFluent.Extensibility.FluentMessage"/> class.
            </summary>
            <param name="message">
            The main message.
            </param>
            <remarks>
            You can use {x} as place holders for standard wordings:
            - {0}. 
            </remarks>
        </member>
        <member name="M:NFluent.Extensibility.FluentMessage.BuildMessage(System.String)">
            <summary>
            Builds the message.
            </summary>
            <param name="message">The message.</param>
            <returns>A fluent message builder.</returns>
        </member>
        <member name="M:NFluent.Extensibility.FluentMessage.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:NFluent.Extensibility.FluentMessage.ChangeMessageTo(System.String)">
            <summary>
            Change the main message.
            </summary>
            <param name="newMessage">New message to use.</param>
        </member>
        <member name="M:NFluent.Extensibility.FluentMessage.For(System.String)">
            <summary>
            Specifies the attribute to use to describe entities.
            </summary>
            <param name="newEntityDescription">The new description for the Entity.</param>
            <returns>The same fluent message.</returns>
        </member>
        <member name="M:NFluent.Extensibility.FluentMessage.For(System.Type)">
            <summary>
            Specifies the type of entities.
            </summary>
            <param name="forcedType">The type of the Entity.</param>
            <returns>The same fluent message.</returns>
        </member>
        <member name="M:NFluent.Extensibility.FluentMessage.On``1(``0,System.Int64)">
            <summary>
            Adds a block describing the checked object.
            </summary>
            <param name="test">
            The tested object/value.
            </param>
            <param name="index">
            The interesting index (for enumerable types).
            </param>
            <returns>
            A <see cref="T:NFluent.Extensibility.FluentMessage"/> to continue build the message.
            </returns>
        </member>
        <member name="M:NFluent.Extensibility.FluentMessage.Expected(System.Object)">
            <summary>
            Adds a message block to describe the expected result.
            </summary>
            <param name="expected">The expected value.</param>
            <returns>
            The created MessageBlock.
            </returns>
        </member>
        <member name="M:NFluent.Extensibility.FluentMessage.ReferenceValues(System.Object)">
            <summary>
            Adds a message block to describe the expected result.
            </summary>
            <param name="expected">The expected value.</param>
            <returns>
            The created MessageBlock.
            </returns>
        </member>
        <member name="M:NFluent.Extensibility.FluentMessage.ExpectedType(System.Type)">
            <summary>
            Adds a message block to describe the expected type.
            </summary>
            <param name="expectedType">The expected type.</param>
            <returns>The created MessageBlock.</returns>
        </member>
        <member name="M:NFluent.Extensibility.FluentMessage.ExpectedValues(System.Object,System.Int64)">
            <summary>
            Adds a message block to describe the expected values.
            </summary>
            <param name="expectedValues">
            The expected values.
            </param>
            <param name="index">
            The index to highlight.
            </param>
            <returns>
            The created MessageBlock.
            </returns>
        </member>
        <member name="M:NFluent.Extensibility.FluentMessage.WithGivenValue(System.Object)">
            <summary>
            Adds a message block to describe the given value (usually used as an 
            alternative to the Expected block).
            </summary>
            <param name="givenValue">The given value.</param>
            <returns>The created MessageBlock.</returns>
        </member>
        <member name="T:NFluent.Extensibility.ReverseEngineeringExceptionMessagesHelper">
            <summary>
            Helper class that helps to retrieve well formated strings exception messages from a failing NFluent Check execution.
            1. You provide the lambda containing the failing check. You run it (from within a test for instance)
            2. You copy the content of the file generated  (with path provided as argument, or default value: ).
            3. You paste the exception message to your nunit ExpectedMessage value.
            </summary>
        </member>
        <member name="M:NFluent.Extensibility.ReverseEngineeringExceptionMessagesHelper.GetProperlyEscapedMessage(System.String)">
            <summary>
            Build a ready-to-be-copied-and-pasted-in-a-string message (it will "escape" tabs, CRLF, and quote characters).
            </summary>
            <param name="input">The input message.</param>
            <returns>The message "escaped" and ready to be copied-and-pasted in a .NET string.</returns>
        </member>
        <member name="P:NFluent.Kernel.CheckWithConsidering.Public">
            <inheritdoc />
        </member>
        <member name="P:NFluent.Kernel.CheckWithConsidering.NonPublic">
            <inheritdoc />
        </member>
        <member name="P:NFluent.Kernel.CheckWithConsidering.All">
            <inheritdoc />
        </member>
        <member name="P:NFluent.Kernel.CheckWithConsidering.And">
            <inheritdoc />
        </member>
        <member name="P:NFluent.Kernel.CheckWithConsidering.IgnoreExtra">
            <inheritdoc />
        </member>
        <member name="M:NFluent.Kernel.CheckWithConsidering.Excluding(System.String[])">
            <inheritdoc />
        </member>
        <member name="P:NFluent.Kernel.CheckWithConsidering.Fields">
            <inheritdoc />
        </member>
        <member name="P:NFluent.Kernel.CheckWithConsidering.Properties">
            <inheritdoc />
        </member>
        <member name="T:NFluent.Kernel.CheckContext">
            <summary>
            Describes default execution context. Used to control context for tests.
            </summary>
        </member>
        <member name="P:NFluent.Kernel.CheckContext.DefaulNegated">
            <summary>
            Gets/Sets the default negation status
            </summary>
            <remarks>This property is used for NFluent checking.</remarks>
        </member>
        <member name="T:NFluent.Kernel.Checker`2">
            <summary>
            Provides a mean to execute some checks on a value, taking care of whether it should be negated or not, etc.
            This interface is designed for developers that need to add new check (extension) methods.
            Thus, it should not be exposed via Intellisense to developers that are using NFluent to write 
            checks statements.
            </summary>
            <typeparam name="T">Type of the value to assert on.</typeparam>
            <typeparam name="TC">Check interface.</typeparam>
        </member>
        <member name="M:NFluent.Kernel.Checker`2.#ctor(NFluent.ICheckForExtensibility{`0,`1},NFluent.Kernel.FluentSut{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:NFluent.Kernel.Checker`2" /> class.
            </summary>
            <param name="fluentCheckForExtensibility">The runnable fluent check.</param>
            <param name="fluentSut"></param>
        </member>
        <member name="P:NFluent.Kernel.Checker`2.Value">
            <inheritdoc />
        </member>
        <member name="P:NFluent.Kernel.Checker`2.Negated">
            <summary>
            Gets a value indicating whether this <see cref="T:NFluent.Kernel.FluentCheck`1" /> should be negated or not.
            This property is useful when you implement check methods.
            </summary>
            <value>
            <c>true</c> if all the methods applying to this check instance should be negated; <c>false</c> otherwise.
            </value>
        </member>
        <member name="M:NFluent.Kernel.Checker`2.BuildMessage(System.String)">
            <summary>
            Builds an error message in.
            </summary>
            <param name="message">The message.</param>
            <returns>A <see cref="T:NFluent.Extensibility.FluentMessage"/> instance.</returns>
        </member>
        <member name="M:NFluent.Kernel.Checker`2.BuildShortMessage(System.String)">
            <summary>
            Builds an error message.
            </summary>
            <param name="message">The message.</param>
            <returns>A <see cref="T:NFluent.Extensibility.FluentMessage"/> instance.</returns>
        </member>
        <member name="M:NFluent.Kernel.Checker`2.SetSutLabel(System.String)">
            <summary>
            Sets an optional label for the SUT to be used instead of the default one for message generation.
            </summary>
            <param name="newLabel">The label for the SUT.</param>
        </member>
        <member name="M:NFluent.Kernel.Checker`2.BuildChainingObject">
            <summary>
            Gets the check link to return for the next check to be executed (linked with the And operator).
            This property is only useful for those that doesn't want to implement their check methods with the 
            <see cref="M:NFluent.Extensibility.IChecker`2.ExecuteCheck(NFluent.Action,System.String)"/> method.
            </summary>
            <returns>
                The check link to return for next check (linked with the And operator) to be executed.
            </returns>
        </member>
        <member name="M:NFluent.Kernel.Checker`2.BuildLinkWhich``1(``0)">
            <inheritdoc />
        </member>
        <member name="M:NFluent.Kernel.Checker`2.ExecuteCheckAndProvideSubItem``1(NFluent.Func{``0},System.String)">
            <summary>
            Execute the check provided as an happy-path lambda.
            </summary>
            <typeparam name="TSub">Checker type for the sub item.</typeparam>
            <param name="checkLambdaAction">The happy-path action (vs. the one for negated version which has not to be specified). 
                This lambda should simply return if everything is ok, or throws a 
                <see cref="T:NFluent.FluentCheckException"/> otherwise.</param>
            <param name="negatedExceptionMessage">The message for the exception to be thrown when the check fails, in the case we were running the negated version.</param>
            <returns>The <see cref="M:NFluent.Kernel.Checker`2.BuildLinkWhich``1(``0)"/> to use for linking.</returns>
        </member>
        <member name="M:NFluent.Kernel.Checker`2.ExecuteCheck(NFluent.Action,System.String)">
            <summary>
            Executes the check provided as an happy-path lambda (vs lambda for negated version).
            </summary>
            <param name="action">
                The happy-path action (vs. the one for negated version which has not to be specified). 
                This lambda should simply return if everything is ok, or throws a 
                <see cref="T:NFluent.FluentCheckException"/> otherwise.</param>
            <param name="negatedExceptionMessage">
                The message for the exception to be thrown when the check fails, in the case we were running the negated version.
            </param>
            <returns>
                A new check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The check fails.</exception>
        </member>
        <member name="M:NFluent.Kernel.Checker`2.ExecuteNotChainableCheck(NFluent.Action,System.String)">
            <inheritdoc />
        </member>
        <member name="T:NFluent.Kernel.CheckLink`1">
            <inheritdoc />
        </member>
        <member name="M:NFluent.Kernel.CheckLink`1.#ctor(NFluent.IMustImplementIForkableCheckWithoutDisplayingItsMethodsWithinIntelliSense)">
            <summary>
            Initializes a new instance of the <see cref="T:NFluent.Kernel.CheckLink`1" /> class.
            </summary>
            <param name="previousCheck">The previous fluent check.</param>
        </member>
        <member name="P:NFluent.Kernel.CheckLink`1.And">
            <inheritdoc />
        </member>
        <member name="M:NFluent.Kernel.CheckLink`1.ToString">
            <inheritdoc />
        </member>
        <member name="T:NFluent.Kernel.ExtendableCheckLink`2">
            <summary>
            Provides an specific implementation for IEnumerable fluent check. Required to implement IEnumerable fluent API.
            </summary>
            <typeparam name="T">
            Type managed by this extension.
            </typeparam>
            <typeparam name="TU">Type of the reference comparand.</typeparam>
        </member>
        <member name="M:NFluent.Kernel.ExtendableCheckLink`2.#ctor(NFluent.IMustImplementIForkableCheckWithoutDisplayingItsMethodsWithinIntelliSense,`1)">
            <summary>
            Initializes a new instance of the <see cref="T:NFluent.Kernel.ExtendableCheckLink`2"/> class. 
            </summary>
            <param name="previousCheck">
            The previous fluent check.
            </param>
            <param name="originalComparand">
            Comparand used for the first check.
            </param>
        </member>
        <member name="P:NFluent.Kernel.ExtendableCheckLink`2.OriginalComparand">
            <summary>
            Gets the initial list that was used in Contains.
            </summary>
            <value>
            Initial list that was used in Contains.
            </value>
        </member>
        <member name="T:NFluent.Kernel.FluentCheck`1">
            <summary>
            Provides fluent check methods to be executed on a given value.
            </summary>
            <typeparam name="T">
            Type of the value to assert on.
            </typeparam>
        </member>
        <member name="F:NFluent.Kernel.FluentCheck`1.checker">
            <summary>
            The check runner.
            </summary>
        </member>
        <member name="M:NFluent.Kernel.FluentCheck`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:NFluent.Kernel.FluentCheck`1"/> class.
            </summary>
            <param name="value">
            The value.
            </param>
        </member>
        <member name="M:NFluent.Kernel.FluentCheck`1.#ctor(`0,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:NFluent.Kernel.FluentCheck`1"/> class.
            </summary>
            <param name="value">
            The value.
            </param>
            <param name="negated">
            A boolean value indicating whether the check should be negated or not.
            </param>
        </member>
        <member name="P:NFluent.Kernel.FluentCheck`1.Not">
            <inheritdoc />
        </member>
        <member name="P:NFluent.Kernel.FluentCheck`1.Checker">
            <inheritdoc />
        </member>
        <member name="M:NFluent.Kernel.FluentCheck`1.Equals(System.Object)">
            <summary>
            Checks whether the specified <see cref="T:System.Object"/> is equal to this instance or not.
            </summary>
            <param name="obj">
            The <see cref="T:System.Object"/> to compare with this instance.
            </param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; throws a <see cref="T:NFluent.FluentCheckException"/> otherwise.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">
            The specified <see cref="T:System.Object"/> is not equal to this instance.
            </exception>
        </member>
        <member name="M:NFluent.Kernel.FluentCheck`1.IsInstanceOf``1">
            <inheritdoc />
        </member>
        <member name="M:NFluent.Kernel.FluentCheck`1.IsNotInstanceOf``1">
            <inheritdoc />
        </member>
        <member name="M:NFluent.Kernel.FluentCheck`1.NFluent#Kernel#IForkableCheck#ForkInstance">
            <inheritdoc />
        </member>
        <member name="T:NFluent.Kernel.FluentCodeCheck`1">
            <summary>
            This class stores all required information to check code.
            </summary>
            <typeparam name="T">Code type.</typeparam>
        </member>
        <member name="M:NFluent.Kernel.FluentCodeCheck`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:NFluent.Kernel.FluentCodeCheck`1"/> class.
            </summary>
            <param name="getTrace">The execution trace.</param>
        </member>
        <member name="M:NFluent.Kernel.FluentCodeCheck`1.#ctor(`0,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:NFluent.Kernel.FluentCodeCheck`1"/> class.
            </summary>
            <param name="value">The execution trace.
            </param>
            <param name="negated">True if test must be negated.
            </param>
        </member>
        <member name="P:NFluent.Kernel.FluentCodeCheck`1.Not">
            <summary>
            OnNegate the next check.
            </summary>
            <value>
            The next check negated.
            </value>
        </member>
        <member name="P:NFluent.Kernel.FluentCodeCheck`1.Checker">
            <summary>
            Gets the runnable check to use for checking something on a value of a given type.
            </summary>
            <value>
            The runnable check to use for checking something on a given type.
            </value>
        </member>
        <member name="M:NFluent.Kernel.FluentCodeCheck`1.ForkInstance">
            <summary>
            Creates a new instance of the same fluent check type, injecting the same Value property 
            (i.e. the system under test), but with a false Negated property in any case.
            </summary>
            <remarks>This method is used during the chaining of multiple checks.</remarks>
            <returns>A new instance of the same fluent check type, with the same Value property.</returns>
        </member>
        <member name="M:NFluent.Kernel.FluentCodeCheck`1.GetTrace(NFluent.Action)">
            <summary>
            Execute the action to capture the run.
            </summary>
            <param name="action">
            <see cref="T:NFluent.Action"/> to be analyzed.
            </param>
            <returns>
            Return <see cref="T:NFluent.RunTrace"/> describing the execution.
            </returns>
        </member>
        <member name="M:NFluent.Kernel.FluentCodeCheck`1.GetTrace``1(NFluent.Func{``0})">
            <summary>
            Execute the function to capture the run.
            </summary>
            <typeparam name="TU">Result type of the function.</typeparam>
            <param name="function">
            <see cref="T:NFluent.Action"/> to be analyzed.
            </param>
            <returns>
            Return <see cref="T:NFluent.RunTrace"/> describing the execution.
            </returns>
        </member>
        <member name="T:NFluent.Kernel.FluentStructCheck`1">
            <summary>
            Provides check methods to be executed on a given struct value.
            </summary>
            <typeparam name="T">Type of the struct value to assert on.</typeparam>
        </member>
        <member name="M:NFluent.Kernel.FluentStructCheck`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:NFluent.Kernel.FluentStructCheck`1" /> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:NFluent.Kernel.FluentStructCheck`1.#ctor(`0,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:NFluent.Kernel.FluentStructCheck`1" /> class.
            </summary>
            <param name="value">The value.</param>
            <param name="negated">A boolean value indicating whether the check should be negated or not.</param>
        </member>
        <member name="P:NFluent.Kernel.FluentStructCheck`1.Not">
            <inheritdoc />
        </member>
        <member name="P:NFluent.Kernel.FluentStructCheck`1.Checker">
            <summary>
            Gets the runner to use for checking something on a given type.
            </summary>
            <value>
            The runner to use for checking something on a given type.
            </value>
        </member>
        <member name="M:NFluent.Kernel.FluentStructCheck`1.NFluent#Kernel#IForkableCheck#ForkInstance">
            <summary>
            Creates a new instance of the same fluent check type, injecting the same Value property
            (i.e. the system under test), but with a false Negated property in any case.
            </summary>
            <returns>
            A new instance of the same fluent check type, with the same Value property.
            </returns>
            <remarks>
            This method is used during the chaining of multiple checks.
            </remarks>
        </member>
        <member name="M:NFluent.Kernel.FluentStructCheck`1.IsInstanceOf``1">
            <summary>
            Checks whether if the checked value is of the given type.
            </summary>
            <typeparam name="TU">The given type to check the checked value against.</typeparam>
            <returns>A chainable check.</returns>
            <exception cref="T:NFluent.FluentCheckException">The specified value is not of the given type.</exception>
        </member>
        <member name="M:NFluent.Kernel.FluentStructCheck`1.IsNotInstanceOf``1">
            <summary>
            Checks whether if the checked value is different from the given type.
            </summary>
            <typeparam name="TU">The given type to check the checked value against.</typeparam>
            <returns>A chainable check.</returns>
            <exception cref="T:NFluent.FluentCheckException">The specified value is of the given type.</exception>
        </member>
        <member name="T:NFluent.Kernel.FluentSut`1">
            <summary>
            Base class that store check context.
            </summary>
            <typeparam name="T">Type of the SUT</typeparam>
        </member>
        <member name="M:NFluent.Kernel.FluentSut`1.#ctor(`0,NFluent.Extensibility.IErrorReporter)">
            <summary>
            Builds a new <see cref="T:NFluent.Kernel.FluentSut`1"/> instance.
            </summary>
            <param name="value">Value to examine.</param>
            <param name="reporter">Error reporter</param>
        </member>
        <member name="M:NFluent.Kernel.FluentSut`1.#ctor(`0,NFluent.Extensibility.IErrorReporter,System.Boolean)">
            <summary>
            Builds a new <see cref="T:NFluent.Kernel.FluentSut`1"/> instance.
            </summary>
            <param name="value">Value to examine.</param>
            <param name="reporter">Error reporter to use</param>
            <param name="negated">true if the check logic must be negated.</param>
        </member>
        <member name="P:NFluent.Kernel.FluentSut`1.Negated">
            <summary>
                Gets/Sets if the check is negated
            </summary>
        </member>
        <member name="P:NFluent.Kernel.FluentSut`1.Value">
            <summary>
                Sut
            </summary>
        </member>
        <member name="P:NFluent.Kernel.FluentSut`1.SutName">
            <summary>
            Name for the sut.
            </summary>
        </member>
        <member name="P:NFluent.Kernel.FluentSut`1.Reporter">
            <summary>
            Gets the error reporter
            </summary>
        </member>
        <member name="T:NFluent.Kernel.IForkableCheck">
            <summary>
            Fluent check which is able to be forked. An check fork is like an check clone where the 
            'Negated' property is always set to false. This interface is mandatory for the check link mechanism. 
            </summary>
            <remarks>
                The .NET standard ICloneable interface is not used here since it doesn't 
                support and include the 'Negated' property value reset.
            </remarks>
        </member>
        <member name="M:NFluent.Kernel.IForkableCheck.ForkInstance">
            <summary>
            Creates a new instance of the same fluent check type, injecting the same Value property 
            (i.e. the system under test), but with a false Negated property in any case.
            </summary>
            <remarks>This method is used during the chaining of multiple checks.</remarks>
            <returns>A new instance of the same fluent check type, with the same Value property.</returns>
        </member>
        <member name="T:NFluent.Kernel.NullableOrNumberCheckLink`1">
            <summary>
            Provides a way to chain two <see cref="T:NFluent.Kernel.IForkableCheck"/> instances or to chain.
            </summary>
            <typeparam name="TN">Number type of the checked nullable.</typeparam>
        </member>
        <member name="M:NFluent.Kernel.NullableOrNumberCheckLink`1.#ctor(NFluent.ICheck{System.Nullable{`0}})">
            <summary>
            Initializes a new instance of the <see cref="T:NFluent.Kernel.NullableOrNumberCheckLink`1" /> class.
            </summary>
            <param name="previousCheck">The previous fluent check.</param>
        </member>
        <member name="P:NFluent.Kernel.NullableOrNumberCheckLink`1.And">
            <summary>
            Chains a new fluent check on the current one for the nullable value.
            </summary>
            <value>
            The new fluent check instance dedicated to the nullable, which has been chained to the previous one.
            </value>
        </member>
        <member name="P:NFluent.Kernel.NullableOrNumberCheckLink`1.Which">
            <summary>
            Chains a new <see cref="T:NFluent.ICheck`1"/> instance to the current check.
            </summary>
            <value>
            The new fluent check instance dedicated to the nullable Value, which has been chained to the previous one.
            </value>
        </member>
        <member name="T:NFluent.Kernel.NumberCheck`1">
            <summary>
            Provides check methods to be executed on a number instance.
            </summary>
            <typeparam name="TN">Type of the numerical value.</typeparam>
        </member>
        <member name="M:NFluent.Kernel.NumberCheck`1.#ctor(NFluent.ICheck{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:NFluent.Kernel.NumberCheck`1" /> class.
            </summary>
            <param name="check">The fluent check.</param>
        </member>
        <member name="M:NFluent.Kernel.NumberCheck`1.IsZero">
            <summary>
            Checks that the actual value is equal to zero.
            </summary>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The value is not equal to zero.</exception>
        </member>
        <member name="M:NFluent.Kernel.NumberCheck`1.IsStrictlyPositive">
            <summary>
            Checks that the actual value is strictly positive (i.e. greater than zero).
            </summary>
            <returns>A check link.</returns>
            <exception cref="T:NFluent.FluentCheckException">The value is not strictly positive (i.e. greater than zero).</exception>
        </member>
        <member name="M:NFluent.Kernel.NumberCheck`1.IsPositiveOrZero">
            <summary>
            Checks that the actual value is positive or equal to zero.
            </summary>
            <returns>A check link.</returns>
            <exception cref="T:NFluent.FluentCheckException">The value is not positive or equal to zero.</exception>
        </member>
        <member name="M:NFluent.Kernel.NumberCheck`1.IsStrictlyNegative">
            <summary>
            Checks that the actual value is strictly negative.
            </summary>
            <returns>A check link.</returns>
            <exception cref="T:NFluent.FluentCheckException">The value is not strictly positive.</exception>
        </member>
        <member name="M:NFluent.Kernel.NumberCheck`1.IsNegativeOrZero">
            <summary>
            Checks that the actual value is negative or equal to zero.
            </summary>
            <returns>A check link.</returns>
            <exception cref="T:NFluent.FluentCheckException">The value is not negative or equal to zero.</exception>
        </member>
        <member name="M:NFluent.Kernel.NumberCheck`1.IsStrictlyLessThan(`0)">
            <summary>
            Checks that the checked value is strictly less than the comparand.
            </summary>
            <param name="comparand">
            Comparand to compare the value to.
            </param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">
            The checked value is not strictly less than the comparand.
            </exception>
        </member>
        <member name="M:NFluent.Kernel.NumberCheck`1.IsStrictlyGreaterThan(`0)">
            <summary>
            Checks that the actual value is more than a comparand.
            </summary>
            <param name="comparand">
            Comparand to compare the value to.
            </param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">
            The value is not less than the comparand.
            </exception>
        </member>
        <member name="M:NFluent.Kernel.NumberCheck`1.InternalIsZero(`0)">
            <summary>
            Checks whether a given value is equal to zero.
            </summary>
            <param name="value">The value.</param>
            <returns>
              <c>true</c> if the specified value is equal to zero; false otherwise.
            </returns>
        </member>
        <member name="T:NFluent.DateTimeCheckExtensions">
            <summary>
            Provides check methods to be executed on a date time instance. 
            </summary>
        </member>
        <member name="M:NFluent.DateTimeCheckExtensions.IsBefore(NFluent.ICheck{System.DateTime},System.DateTime)">
            <summary>
            Checks that the actual DateTime is strictly before the given one.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <param name="other">The other DateTime.</param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The checked date time is not before the given one.</exception>
        </member>
        <member name="M:NFluent.DateTimeCheckExtensions.IsBeforeOrEqualTo(NFluent.ICheck{System.DateTime},System.DateTime)">
            <summary>
            Checks that the actual DateTime is before or equals to the given one.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <param name="other">The other DateTime.</param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The checked date time is not before or equals to the given one.</exception>
        </member>
        <member name="M:NFluent.DateTimeCheckExtensions.IsAfter(NFluent.ICheck{System.DateTime},System.DateTime)">
            <summary>
            Checks that the actual DateTime is strictly after the given one.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <param name="other">The other DateTime.</param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The checked date time is not after the given one.</exception>
        </member>
        <member name="M:NFluent.DateTimeCheckExtensions.IsAfterOrEqualTo(NFluent.ICheck{System.DateTime},System.DateTime)">
            <summary>
            Checks that the actual DateTime is after or equals to the given one.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <param name="other">The other DateTime.</param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The checked date time is not after or equals to the given one.</exception>
        </member>
        <member name="M:NFluent.DateTimeCheckExtensions.IsEqualToIgnoringMillis(NFluent.ICheck{System.DateTime},System.DateTime)">
            <summary>
            Checks that actual and given DateTime have same year, month, day, hour, minute and second fields,
            (millisecond fields are ignored in comparison).
            Code example :
            <code>
                // successfull checks
                DateTime dateTime1 = new DateTime(2000, 1, 1, 0, 0, 1, 0);
                DateTime dateTime2 = new DateTime(2000, 1, 1, 0, 0, 1, 456);
                Check.That(dateTime1).IsEqualToIgnoringMillis(dateTime2);
                // failing checks (even if time difference is only 1ms)
                DateTime dateTimeA = new DateTime(2000, 1, 1, 0, 0, 1, 0);
                DateTime dateTimeB = new DateTime(2000, 1, 1, 0, 0, 0, 999);
                Check.That(dateTimeA).IsEqualToIgnoringMillis(dateTimeB);
            </code>
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <param name="other">The other DateTime.</param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The checked date time is not equal to the given one with the milliseconds ignored.</exception>
            <remarks>
            Check can fail with dateTimes in same chronological millisecond time window, e.g :
            2000-01-01T00:00:<b>01.000</b> and 2000-01-01T00:00:<b>00.999</b>.
            check fails as second fields differ even if time difference is only 1 millis.
            </remarks>
        </member>
        <member name="M:NFluent.DateTimeCheckExtensions.IsEqualToIgnoringSeconds(NFluent.ICheck{System.DateTime},System.DateTime)">
            <summary>
            Checks that actual and given DateTime have same year, month, day, hour and minute fields,
            (Seconds and millisecond fields are ignored in comparison).
            <code>
            check can fail with DateTimes in same chronological second time window, e.g :
            2000-01-01T00:<b>01:00</b>.000 and 2000-01-01T00:<b>00:59</b>.000.
            check fails as minute fields differ even if time difference is only 1s.
            </code>
            Code example :
            <code>
                // successfull checks
                DateTime dateTime1 = new DateTime(2000, 1, 1, 23, 50, 0, 0);
                DateTime dateTime2 = new DateTime(2000, 1, 1, 23, 50, 10, 456);
                Check.That(dateTime1).IsEqualToIgnoringSeconds(dateTime2);
                // failing checks (even if time difference is only 1ms)
                DateTime dateTimeA = new DateTime(2000, 1, 1, 23, 50, 00, 000);
                DateTime dateTimeB = new DateTime(2000, 1, 1, 23, 49, 59, 999);
                Check.That(dateTimeA).IsEqualToIgnoringSeconds(dateTimeB);
            </code>
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <param name="other">The other DateTime.</param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The checked date time is not equal to the given one with second and millisecond fields ignored.</exception>
        </member>
        <member name="M:NFluent.DateTimeCheckExtensions.IsEqualToIgnoringMinutes(NFluent.ICheck{System.DateTime},System.DateTime)">
            <summary>
            Checks that actual and given DateTime have same year, month, day and hour fields,
            (Minutes, seconds and millisecond fields are ignored in comparison).
            <code>
            check can fail with dateTimes in same chronological second time window, e.g :
            2000-01-01T<b>01:00</b>:00.000 and 2000-01-01T<b>00:59:59</b>.000.
            Time difference is only 1s but hour fields differ.
            </code>
            Code example :
            <code>
                // successfull checks
                DateTime dateTime1 = new DateTime(2000, 1, 1, 23, 50, 0, 0);
                DateTime dateTime2 = new DateTime(2000, 1, 1, 23, 00, 2, 7);
                Check.That(dateTime1).IsEqualToIgnoringMinutes(dateTime2);
                // failing checks (even if time difference is only 1ms)
                DateTime dateTimeA = new DateTime(2000, 1, 1, 01, 00, 00, 000);
                DateTime dateTimeB = new DateTime(2000, 1, 1, 00, 59, 59, 999);
                Check.That(dateTimeA).IsEqualToIgnoringMinutes(dateTimeB);
            </code>
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <param name="other">The other DateTime.</param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The checked date time is not equal to the given one with minute, second and millisecond fields ignored.</exception>
        </member>
        <member name="M:NFluent.DateTimeCheckExtensions.IsEqualToIgnoringHours(NFluent.ICheck{System.DateTime},System.DateTime)">
            <summary>
            Checks that actual and given DateTime have same year, month and day fields,
            * (Hours, minutes, seconds and millisecond fields are ignored in comparison).
            * <code>
            check can fail with dateTimes in same chronological minute time window, e.g :
            2000-01-<b>01T23:59</b>:00.000 and 2000-01-02T<b>00:00</b>:00.000.
            Time difference is only 1min but day fields differ.
            </code>
            Code example :
            <code>
                // successfull checks
                DateTime dateTime1 = new DateTime(2000, 1, 1, 23, 59, 59, 999);
                DateTime dateTime2 = new DateTime(2000, 1, 1, 00, 00, 00, 000);
                CheckThat(dateTime1).IsEqualToIgnoringHours(dateTime2);
                // failing checks (even if time difference is only 1ms)
                DateTime dateTimeA = new DateTime(2000, 1, 2, 00, 00, 00, 000);
                DateTime dateTimeB = new DateTime(2000, 1, 1, 23, 59, 59, 999);
                CheckThat(dateTimeA).IsEqualToIgnoringHours(dateTimeB);
            </code>
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <param name="other">The other DateTime.</param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The checked date time is not equal to the given one with hour, minute, second and millisecond fields ignored.</exception>
        </member>
        <member name="M:NFluent.DateTimeCheckExtensions.IsInSameYearAs(NFluent.ICheck{System.DateTime},System.DateTime)">
            <summary>
            Checks that actual and given DateTime have same year.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <param name="other">The other DateTime.</param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The checked date time year is not equal to the given year.</exception>
        </member>
        <member name="M:NFluent.DateTimeCheckExtensions.IsInSameMonthAs(NFluent.ICheck{System.DateTime},System.DateTime)">
            <summary>
            Checks that actual and given DateTime have same month, whatever the year.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <param name="other">The other DateTime.</param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The checked date time month is not equal to the given month, whatever the year.</exception>
        </member>
        <member name="M:NFluent.DateTimeCheckExtensions.IsInSameDayAs(NFluent.ICheck{System.DateTime},System.DateTime)">
            <summary>
            Checks that actual and given DateTime have same day, whatever the year or the month.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <param name="other">The other DateTime.</param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The checked date time day is not equal to the given day, whatever the year or the month.</exception>
        </member>
        <member name="T:NFluent.DictionaryCheckExtensions">
            <summary>
            Provides check methods to be executed on an <see cref="T:System.Collections.Generic.IDictionary`2"/> value.
            </summary>
        </member>
        <member name="M:NFluent.DictionaryCheckExtensions.ContainsKey``2(NFluent.ICheck{System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}}},``0)">
            <summary>
            Checks that the actual <see cref="T:System.Collections.Generic.IDictionary`2"/> contains the expected expectedKey.
            </summary>
            <typeparam name="TK">
            The type of the expectedKey element.
            </typeparam>
            <typeparam name="TU">Type for values.</typeparam>
            <param name="check">
            The fluent check to be extended.
            </param>
            <param name="key">
            The expected expectedKey value.
            </param>
            <returns>
            A check link.
            </returns>
        </member>
        <member name="M:NFluent.DictionaryCheckExtensions.ContainsValue``2(NFluent.ICheck{System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}}},``1)">
            <summary>
            Checks that the actual <see cref="T:System.Collections.Generic.IDictionary`2"/> contains the expected value.
            </summary>
            <typeparam name="TK">
            The type of the expectedKey element.
            </typeparam>
            <typeparam name="TU">
            Value type.
            </typeparam>
            <param name="check">
            The fluent check to be extended.
            </param>
            <param name="expectedValue">
            The expected value.
            </param>
            <returns>
            A check link.
            </returns>
        </member>
        <member name="M:NFluent.DictionaryCheckExtensions.ContainsPair``2(NFluent.ICheck{System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}}},``0,``1)">
            <summary>
            Checks that the actual <see cref="T:System.Collections.Generic.IDictionary`2"/> contains the expected key-value pair.
            </summary>
            <typeparam name="TK">The key type.</typeparam>
            <typeparam name="TU">The value type.</typeparam>
            <param name="check">Fluent check.</param>
            <param name="expectedKey">Expected key.</param>
            <param name="expectedValue">Expected value.</param>
            <returns>A check link.</returns>
        </member>
        <member name="M:NFluent.DictionaryCheckExtensions.ContainsKey(NFluent.ICheck{System.Collections.Hashtable},System.Object)">
            <summary>
            Checks that the actual <see cref="T:System.Collections.Hashtable"/> contains the expected expectedKey.
            </summary>
            <param name="check">
            The fluent check to be extended.
            </param>
            <param name="key">
            The expected expectedKey value.
            </param>
            <returns>
            A check link.
            </returns>
        </member>
        <member name="M:NFluent.DictionaryCheckExtensions.ContainsValue(NFluent.ICheck{System.Collections.Hashtable},System.Object)">
            <summary>
            Checks that the actual <see cref="T:System.Collections.Hashtable"/> contains the expected value.
            </summary>
            <param name="check">
            The fluent check to be extended.
            </param>
            <param name="expectedValue">
            The expected value.
            </param>
            <returns>
            A check link.
            </returns>
        </member>
        <member name="M:NFluent.DictionaryCheckExtensions.ContainsPair(NFluent.ICheck{System.Collections.Hashtable},System.Object,System.Object)">
            <summary>
            Checks that the actual <see cref="T:System.Collections.Hashtable"/> contains the expected key-value pair.
            </summary>
            <param name="check">Fluent check.</param>
            <param name="expectedKey">Expected key.</param>
            <param name="expectedValue">Expected value.</param>
            <returns>A check link.</returns>
        </member>
        <member name="T:NFluent.DoubleSpecificCheckExtensions">
            <summary>
            Provides specific check methods to be executed on an <see cref="T:System.Double"/> value.
            </summary>
        </member>
        <member name="M:NFluent.DoubleSpecificCheckExtensions.IsNaN(NFluent.ICheck{System.Double})">
            <summary>
            Determines whether the specified number evaluates to a value that is not a number (NaN).
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The current value is a number.</exception>
        </member>
        <member name="M:NFluent.DoubleSpecificCheckExtensions.IsFinite(NFluent.ICheck{System.Double})">
            <summary>
            Determines whether the specified number evaluates to a value that is finite (i.e. not infinity).
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The specified number evaluates to a value that is infinite (i.e. equals to infinity).</exception>
        </member>
        <member name="M:NFluent.DoubleSpecificCheckExtensions.IsCloseTo(NFluent.ICheck{System.Double},System.Double,System.Double)">
            <summary>
            Determines whether the actual number is close to an expected value within a given within.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <param name="expected">The expected value.</param>
            <param name="within">The within.</param>
            <returns>A continuation check.</returns>
        </member>
        <member name="T:NFluent.EnumCheckExtensions">
            <summary>
            Hosts Enum specific checks
            </summary>
        </member>
        <member name="M:NFluent.EnumCheckExtensions.DoesNotHaveFlag``1(NFluent.ICheck{``0},``0)">
            <summary>
            Checks that an enum does not have a flag set
            </summary>
            <typeparam name="T">type of checked enum</typeparam>
            <param name="check">check object</param>
            <param name="flag">flag to check if it is present</param>
            <returns>link object for further checks</returns>
        </member>
        <member name="M:NFluent.EnumCheckExtensions.HasFlag``1(NFluent.ICheck{``0},``0)">
            <summary>
            Checks that an enum does have a flag set
            </summary>
            <typeparam name="T">type of checked enum</typeparam>
            <param name="check">check object</param>
            <param name="flag">flag to check if it is present</param>
            <returns>link object for further checks</returns>
        </member>
        <member name="T:NFluent.EnumerableCheckExtensions">
            <summary>
            Provides check methods to be executed on an <see cref="T:System.Collections.IEnumerable" /> value.
            </summary>
        </member>
        <member name="M:NFluent.EnumerableCheckExtensions.Contains``2(NFluent.ICheck{``0},``1[])">
            <summary>
            Checks that the enumerable contains all the given expected values, in any order.
            </summary>
            <typeparam name="T">Type of the elements contained in the enumerable.</typeparam>
            <typeparam name="TU">Type of enumeration</typeparam>
            <param name="check">The fluent check to be extended.</param>
            <param name="expectedValues">The expected values to be found.</param>
            <returns>
             A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The enumerable does not contain all the expected values.</exception>
        </member>
        <member name="M:NFluent.EnumerableCheckExtensions.Contains``1(NFluent.ICheck{``0},System.Collections.IEnumerable)">
            <summary>
            Checks that the enumerable contains all the values present in another enumerable, in any order.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <param name="otherEnumerable">The enumerable containing the expected values to be found.</param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">
            The enumerable does not contain all the expected values present in the other enumerable.
            </exception>
        </member>
        <member name="M:NFluent.EnumerableCheckExtensions.ContainsExactly``2(NFluent.ICheck{``0},``1[])">
            <summary>
                Checks that the enumerable contains only the given expected values and nothing else, in order.
                This check should only be used with IEnumerable that have a consistent iteration order
                (i.e. don't use it with Hashtable, prefer <see cref="M:NFluent.EnumerableCheckExtensions.IsOnlyMadeOf``1(NFluent.ICheck{System.Collections.IEnumerable},``0[])" /> in that case).
            </summary>
            <typeparam name="T">Type of the elements to be found.</typeparam>
            <typeparam name="TU"></typeparam>
            <param name="check">The fluent check to be extended.</param>
            <param name="expectedValues">The expected values to be found.</param>
            <returns>
                A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">
                The enumerable does not contains only the exact given values and nothing else,
                in order.
            </exception>
        </member>
        <member name="M:NFluent.EnumerableCheckExtensions.ContainsExactly``1(NFluent.ICheck{``0},System.Collections.IEnumerable)">
            <summary>
                Checks that the enumerable contains only the values of another enumerable and nothing else, in order.
                This check should only be used with IEnumerable that have a consistent iteration order
                (i.e. don't use it with Hashtable, prefer <see cref="M:NFluent.EnumerableCheckExtensions.IsOnlyMadeOf``1(NFluent.ICheck{System.Collections.IEnumerable},``0[])" /> in that case).
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <param name="otherEnumerable">The other enumerable containing the exact expected values to be found.</param>
            <returns>
                A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">
                The enumerable does not contains only the exact given values and nothing else,
                in order.
            </exception>
        </member>
        <member name="M:NFluent.EnumerableCheckExtensions.IsEquivalentTo``1(NFluent.ICheck{System.Collections.Generic.IEnumerable{``0}},``0[])">
            <summary>
            Checks if the sut contains the same element than a given list.
            </summary>
            <param name="context">Context for the check</param>
            <param name="content"></param>
            <typeparam name="T">Type of enumerable content</typeparam>
            <returns>A chainable link.</returns>
        </member>
        <member name="M:NFluent.EnumerableCheckExtensions.IsEquivalentTo``1(NFluent.ICheck{System.Collections.Generic.IEnumerable{``0}},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Checks if the sut contains the same element than a given list.
            </summary>
            <param name="context">Context for the check</param>
            <param name="content">Expected content</param>
            <typeparam name="T">Type of enumerable content</typeparam>
            <returns>A chainable link.</returns>
        </member>
        <member name="M:NFluent.EnumerableCheckExtensions.ContainsOnlyElementsThatMatch``1(NFluent.ICheck{System.Collections.Generic.IEnumerable{``0}},NFluent.Func{``0,System.Boolean})">
            <summary>
            Checks that the given enumerable does contain all items matching a predicate.
            </summary>
            <typeparam name="T">Type of items.</typeparam>
            <param name="check">Check item.</param>
            <param name="predicate">Predicate to evaluate.</param>
            <returns>A linkable check.</returns>
        </member>
        <member name="M:NFluent.EnumerableCheckExtensions.HasElementAt``1(NFluent.ICheck{System.Collections.Generic.IEnumerable{``0}},System.Int32)">
            <summary>
                Check a specific item in the <see cref="T:System.Collections.IEnumerable" />.
            </summary>
            <typeparam name="T">
                Enumerated type.
            </typeparam>
            <param name="check">
                The checker.
            </param>
            <param name="index">
                Index to check.
            </param>
            <returns>
                An extensible checker.
            </returns>
        </member>
        <member name="M:NFluent.EnumerableCheckExtensions.HasElementThatMatches``1(NFluent.ICheck{System.Collections.Generic.IEnumerable{``0}},NFluent.Func{``0,System.Boolean})">
            <summary>
                Checks that the given enumerable does contain at least one item matching a predicate.
            </summary>
            <typeparam name="T">Type of items.</typeparam>
            <param name="check">Check item.</param>
            <param name="predicate">Predicate to evaluate.</param>
            <returns>A linkable check.</returns>
        </member>
        <member name="M:NFluent.EnumerableCheckExtensions.HasFirstElement``1(NFluent.ICheck{System.Collections.Generic.IEnumerable{``0}})">
            <summary>
                Checks that the enumerable has a first element, and returns a check on that element.
            </summary>
            <typeparam name="T">The element type of the collection.</typeparam>
            <param name="check">The fluent check to be extended.</param>
            <returns>A check on the first element.</returns>
        </member>
        <member name="M:NFluent.EnumerableCheckExtensions.HasLastElement``1(NFluent.ICheck{System.Collections.Generic.IEnumerable{``0}})">
            <summary>
                Checks that the enumerable has a last element, and returns a check on that element.
            </summary>
            <typeparam name="T">The element type of the collection.</typeparam>
            <param name="check">The fluent check to be extended.</param>
            <returns>A check on the last element.</returns>
        </member>
        <member name="M:NFluent.EnumerableCheckExtensions.HasOneElementOnly``1(NFluent.ICheck{System.Collections.Generic.IEnumerable{``0}})">
            <summary>
                Checks that the enumerable has a single element, and returns a check on that element.
            </summary>
            <typeparam name="T">The element type of the collection.</typeparam>
            <param name="check">The fluent check to be extended.</param>
            <returns>A check on the single element.</returns>
        </member>
        <member name="M:NFluent.EnumerableCheckExtensions.HasSize(NFluent.ICheck{System.Collections.IEnumerable},System.Int64)">
            <summary>
                Checks that the enumerable has the proper number of elements.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <param name="expectedSize">The expected size to be found.</param>
            <returns>
                A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The enumerable has not the expected number of elements.</exception>
        </member>
        <member name="M:NFluent.EnumerableCheckExtensions.CountIs(NFluent.ICheck{System.Collections.IEnumerable},System.Int64)">
            <summary>
                Checks that the enumerable has the proper number of elements.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <param name="expectedCount">The expected count to be found.</param>
            <returns>
                A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The enumerable has not the expected number of elements.</exception>
        </member>
        <member name="M:NFluent.EnumerableCheckExtensions.IsEmpty``1(NFluent.ICheck{``0})">
            <summary>
                Checks that the enumerable is empty.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <returns>
                A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The enumerable is not empty.</exception>
        </member>
        <member name="M:NFluent.EnumerableCheckExtensions.IsNullOrEmpty``1(NFluent.ICheck{``0})">
            <summary>
                Checks that the enumerable is null or empty.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <returns>
                A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The enumerable is not empty.</exception>
        </member>
        <member name="M:NFluent.EnumerableCheckExtensions.IsOnlyMadeOf``1(NFluent.ICheck{System.Collections.IEnumerable},``0[])">
            <summary>
                Checks that the enumerable contains only the given values and nothing else, in any order.
                Note: this check succeeded with empty value.
            </summary>
            <typeparam name="T">Type of the expected values to be found.</typeparam>
            <param name="check">The fluent check to be extended.</param>
            <param name="expectedValues">The expected values to be found.</param>
            <returns>
                A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The enumerable does not contain only the expected values provided.</exception>
        </member>
        <member name="M:NFluent.EnumerableCheckExtensions.IsOnlyMadeOf(NFluent.ICheck{System.Collections.IEnumerable},System.Collections.IEnumerable)">
            <summary>
                Checks that the enumerable contains only the values present in another enumerable, and nothing else, in any order.
                Note: this check succeeded with empty value.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <param name="expectedValues">The expected values to be found.</param>
            <returns>
                A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">
                The enumerable does not contain only the expected values present in the other
                enumerable.
            </exception>
        </member>
        <member name="M:NFluent.EnumerableCheckExtensions.ContainsNoDuplicateItem``1(NFluent.ICheck{``0})">
            <summary>
            Checks that all items in an enumeration are unique.
            </summary>
            <param name="context">Context for the check</param>
            <typeparam name="T">Type of enumeration</typeparam>
            <returns>A context link.</returns>
        </member>
        <member name="M:NFluent.EnumerableCheckExtensions.ContainsNoNull``1(NFluent.ICheck{``0})">
            <summary>
            Checks that all items in an enumeration are non null.
            </summary>
            <param name="context">Context for the check</param>
            <typeparam name="T">Type of enumeration</typeparam>
            <returns>A context link.</returns>
        </member>
        <member name="M:NFluent.EnumerableCheckExtensions.ContainsOnlyInstanceOfType``1(NFluent.ICheck{``0},System.Type)">
            <summary>
            Checks that all items in an enumeration are non null.
            </summary>
            <param name="context">Context for the check</param>
            <param name="type">Expected type</param>
            <typeparam name="T">Type of enumeration</typeparam>
            <returns>A context link.</returns>
        </member>
        <member name="M:NFluent.EnumerableCheckExtensions.ExtractNotFoundValues(System.Collections.IEnumerable,System.Collections.IEnumerable)">
            <summary>
                Returns all expected values that aren't present in the enumerable.
            </summary>
            <param name="enumerable">The enumerable to inspect.</param>
            <param name="expectedValues">The expected values to search within the enumerable.</param>
            <returns>
                A list containing all the expected values that aren't present in the enumerable.
            </returns>
        </member>
        <member name="M:NFluent.EnumerableCheckExtensions.ExtractUnexpectedValues(System.Collections.IEnumerable,System.Collections.IEnumerable)">
            <summary>
                Returns all the values of the enumerable that don't belong to the expected ones.
            </summary>
            <param name="enumerable">The enumerable to inspect.</param>
            <param name="expectedValues">The allowed values to be part of the enumerable.</param>
            <returns>
                A list with all the values found in the enumerable that don't belong to the expected ones.
            </returns>
        </member>
        <member name="T:NFluent.EnumerableFluentSyntaxExtension">
            <summary>
            Provides extension method on a ICheckLink for IEnumerable types.
            </summary>
        </member>
        <member name="M:NFluent.EnumerableFluentSyntaxExtension.Only(NFluent.IExtendableCheckLink{System.Collections.IEnumerable,System.Collections.IEnumerable})">
            <summary>
            Checks that the checked <see cref="T:System.Collections.IEnumerable"/> contains only the authorized items. Can only be used after a call to Contains.
            </summary>
            <param name="chainedCheckLink">
            The chained fluent check.
            </param>
            <returns>
            A check link.
            </returns>
        </member>
        <member name="M:NFluent.EnumerableFluentSyntaxExtension.Once(NFluent.IExtendableCheckLink{System.Collections.IEnumerable,System.Collections.IEnumerable})">
            <summary>
            Checks that the checked <see cref="T:System.Collections.IEnumerable"/> contains the expected list of items only once.
            </summary>
            <param name="chainedCheckLink">
            The chained fluent check.
            </param>
            <returns>
            A check link.
            </returns>
        </member>
        <member name="M:NFluent.EnumerableFluentSyntaxExtension.InThatOrder(NFluent.IExtendableCheckLink{System.Collections.IEnumerable,System.Collections.IEnumerable})">
            <summary>
            Checks that the checked <see cref="T:System.Collections.IEnumerable"/> contains items in the expected order.
            </summary>
            <param name="chainedCheckLink">
            The chained fluent check.
            </param>
            <returns>
            A check link.
            </returns>
        </member>
        <member name="T:NFluent.EventWaitHandleCheckExtensions">
            <summary>
            Provides check methods to be executed on a <see cref="T:System.Threading.EventWaitHandle"/> instance.
            </summary>
        </member>
        <member name="M:NFluent.EventWaitHandleCheckExtensions.IsSetWithin(NFluent.ICheck{System.Threading.EventWaitHandle},System.Double,NFluent.TimeUnit)">
            <summary>
            Checks that the event is set within a given timeout.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <param name="timeOut">The maximum amount of time before the event should be set (time unit being specified with the timeUnit parameter).</param>
            <param name="timeUnit">The time unit of the given timeOut.</param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The event was not set before the given timeout.</exception>
        </member>
        <member name="M:NFluent.EventWaitHandleCheckExtensions.IsNotSetWithin(NFluent.ICheck{System.Threading.EventWaitHandle},System.Double,NFluent.TimeUnit)">
            <summary>
            Checks that the event is not set within a given timeout.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <param name="timeOut">The maximum amount of time before the event should not be set (time unit being specified with the timeUnit parameter).</param>
            <param name="timeUnit">The time unit of the given timeOut.</param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The event was set before the given timeout.</exception>
        </member>
        <member name="T:NFluent.ObjectChecksNonGenericVariants">
            <summary>
            Hosts non generic variants of some checks.
            </summary>
        </member>
        <member name="M:NFluent.ObjectChecksNonGenericVariants.IsInstanceOfType``1(NFluent.ICheck{``0},System.Type)">
            <summary>
            Checks if an object is an instance of a specified type.
            </summary>
            <param name="check">checker logic object</param>
            <param name="type">expected type</param>
            <typeparam name="T">type of checked object</typeparam>
            <returns>A check link</returns>
        </member>
        <member name="M:NFluent.ObjectChecksNonGenericVariants.IsNotAnInstanceOfThese``1(NFluent.ICheck{``0},System.Type[])">
            <summary>
            Checks that the sut's type is not one of forbidden types types.
            </summary>
            <param name="context">check context</param>
            <param name="types">possible types</param>
            <typeparam name="T">type of the SUT</typeparam>
            <returns>check link</returns>
        </member>
        <member name="M:NFluent.ObjectChecksNonGenericVariants.IsAnInstanceOfOneOf``1(NFluent.ICheck{``0},System.Type[])">
            <summary>
            Checks that the sut's type is one of several possible types.
            </summary>
            <param name="context">check context</param>
            <param name="types">possible types</param>
            <typeparam name="T">type of the SUT</typeparam>
            <returns>check link</returns>
        </member>
        <member name="M:NFluent.ObjectChecksNonGenericVariants.IsNoInstanceOfType``1(NFluent.ICheck{``0},System.Type)">
            <summary>
            Checks if an object is not an instance of a specified type.
            </summary>
            <param name="check">checker logic object</param>
            <param name="type">expected type</param>
            <typeparam name="T">type of checked object</typeparam>
            <returns>A check link</returns>
        </member>
        <member name="T:NFluent.ReflectionWrapperChecks">
            <summary>
                Hosts reflection-based checks <see cref="M:NFluent.ObjectFieldsCheckExtensions.Considering``1(NFluent.ICheck{``0})" />
            </summary>
        </member>
        <member name="M:NFluent.ReflectionWrapperChecks.IsEqualTo``1(NFluent.ICheck{NFluent.Helpers.ReflectionWrapper},``0)">
            <summary>
            </summary>
            <param name="check"></param>
            <param name="expectedValue"></param>
            <returns></returns>
        </member>
        <member name="M:NFluent.ReflectionWrapperChecks.IsOneOf(NFluent.ICheck{NFluent.Helpers.ReflectionWrapper},System.Object[])">
            <summary>
                Checks if the extracted members match one of the provided expected values.
            </summary>
            <param name="check">Checker logiv.</param>
            <param name="values">List of possible values</param>
            <returns>A link object</returns>
        </member>
        <member name="M:NFluent.ReflectionWrapperChecks.IsNull(NFluent.ICheck{NFluent.Helpers.ReflectionWrapper})">
            <inheritdoc cref="M:NFluent.ObjectCheckExtensions.IsNull``1(NFluent.ICheck{``0})" />
        </member>
        <member name="M:NFluent.ReflectionWrapperChecks.IsNotNull(NFluent.ICheck{NFluent.Helpers.ReflectionWrapper})">
            <inheritdoc cref="M:NFluent.ObjectCheckExtensions.IsNotNull``1(NFluent.ICheck{``0})" />
        </member>
        <member name="M:NFluent.ReflectionWrapperChecks.IsSameReferenceAs``1(NFluent.ICheck{NFluent.Helpers.ReflectionWrapper},``0)">
            <inheritdoc cref="M:NFluent.ObjectCheckExtensions.IsSameReferenceAs``2(NFluent.ICheck{``0},``1)" />
        </member>
        <member name="M:NFluent.ReflectionWrapperChecks.IsDistinctFrom``1(NFluent.ICheck{NFluent.Helpers.ReflectionWrapper},``0)">
            <inheritdoc cref="M:NFluent.ObjectCheckExtensions.IsDistinctFrom``2(NFluent.ICheck{``0},``1)" />
        </member>
        <member name="T:NFluent.Helpers.FailureHandler">
            <summary>
            Hosts meta checks (checks for checks)
            </summary>
        </member>
        <member name="M:NFluent.Helpers.FailureHandler.IsAFaillingCheckWithMessage(NFluent.ICodeCheck{NFluent.RunTrace},System.String[])">
            <summary>
                Verify that the code results in a failed NFluent check with a specified message.
            </summary>
            <param name="check"></param>
            <param name="lines"></param>
            <returns>A link check</returns>
        </member>
        <member name="M:NFluent.Helpers.FailureHandler.IsAFaillingCheck(NFluent.ICodeCheck{NFluent.RunTrace})">
            <summary>
                Verify that the code results in a failed NFluent check with a specified message.
            </summary>
            <param name="check"></param>
            <returns>A link check</returns>
        </member>
        <member name="P:NFluent.Helpers.MemberMatch.ExpectedFieldFound">
            <summary>
                Gets a actualValue indicating whether the expected field has been found.
            </summary>
        </member>
        <member name="T:NFluent.Helpers.ReflectionWrapper">
            <summary>
                This class wraps instances for reflection based checks (in NFluent).
            </summary>
        </member>
        <member name="F:NFluent.Helpers.ReflectionWrapper.AnonymousTypeFieldMask">
            <summary>
                The anonymous type field mask.
            </summary>
        </member>
        <member name="F:NFluent.Helpers.ReflectionWrapper.AutoPropertyMask">
            <summary>
                The auto property mask.
            </summary>
        </member>
        <member name="M:NFluent.Helpers.ReflectionWrapper.#cctor">
            <summary>
                Initializes static members of the <see cref="T:NFluent.ObjectFieldsCheckExtensions" /> class.
            </summary>
        </member>
        <member name="M:NFluent.Helpers.ReflectionWrapper.ToString">
            <inheritdoc />
        </member>
        <member name="M:NFluent.Helpers.ReflectionWrapper.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:NFluent.Helpers.ReflectionWrapper.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:NFluent.Helpers.Duration">
            <summary>
            Represents a duration as an unit and a quantity.
            </summary>
        </member>
        <member name="M:NFluent.Helpers.Duration.#ctor(System.Double,NFluent.TimeUnit)">
            <summary>
            Initializes a new instance of the <see cref="T:NFluent.Helpers.Duration"/> struct. 
            </summary>
            <param name="rawDuration">
            Duration of the raw.
            </param>
            <param name="timeUnit">
            The time unit.
            </param>
        </member>
        <member name="M:NFluent.Helpers.Duration.#ctor(System.TimeSpan,NFluent.TimeUnit)">
            <summary>
            Initializes a new instance of the <see cref="T:NFluent.Helpers.Duration"/> struct.
            </summary>
            <param name="timeSpan">The time span.</param>
            <param name="unit">The time unit.</param>
        </member>
        <member name="P:NFluent.Helpers.Duration.RawDuration">
            <summary>
            Gets the duration quantity expressed in the proper <see cref="T:NFluent.TimeUnit"/>.
            </summary>
            <value>
            The duration quantity expressed in the proper <see cref="T:NFluent.TimeUnit"/>.
            </value>
        </member>
        <member name="P:NFluent.Helpers.Duration.Unit">
            <summary>
            Gets the unit in which the duration is express.
            </summary>
            <value>
            The unit used for the duration.
            </value>
        </member>
        <member name="M:NFluent.Helpers.Duration.ConvertToMilliseconds(System.Double,NFluent.TimeUnit)">
            <summary>
            Converts a given duration to a number of milliseconds.
            </summary>
            <param name="duration">The duration value.</param>
            <param name="durationTimeUnit">The time unit of the duration.</param>
            <returns>The number of milliseconds corresponding to that duration.</returns>
        </member>
        <member name="M:NFluent.Helpers.Duration.op_LessThan(NFluent.Helpers.Duration,NFluent.Helpers.Duration)">
            <summary>
            Checks if duration a is less than duration b.
            </summary>
            <param name="a">
            First operand.
            </param>
            <param name="b">
            Second operand.
            </param>
            <returns>
            True if a is less than b.
            </returns>
        </member>
        <member name="M:NFluent.Helpers.Duration.op_GreaterThanOrEqual(NFluent.Helpers.Duration,NFluent.Helpers.Duration)">
            <summary>
            Checks if duration a is greater than or equal to duration b.
            </summary>
            <param name="a">
            First operand.
            </param>
            <param name="b">
            Second operand.
            </param>
            <returns>
            True if a is greater than or equal to b.
            </returns>
        </member>
        <member name="M:NFluent.Helpers.Duration.op_LessThanOrEqual(NFluent.Helpers.Duration,NFluent.Helpers.Duration)">
            <summary>
            Checks if duration a is less than or equal to duration b.
            </summary>
            <param name="a">
            First operand.
            </param>
            <param name="b">
            Second operand.
            </param>
            <returns>
            True if a is less than or equal to b.
            </returns>
        </member>
        <member name="M:NFluent.Helpers.Duration.op_GreaterThan(NFluent.Helpers.Duration,NFluent.Helpers.Duration)">
            <summary>
            Checks if duration a is greater than duration b.
            </summary>
            <param name="a">
            First operand.
            </param>
            <param name="b">
            Second operand.
            </param>
            <returns>
            True if a is greater than b.
            </returns>
        </member>
        <member name="M:NFluent.Helpers.Duration.op_Equality(NFluent.Helpers.Duration,NFluent.Helpers.Duration)">
            <summary>
            Checks if the duration is equal to another object.
            </summary>
            <param name="left">
            First comparand.
            </param>
            <param name="right">
            Second comparand.
            </param>
            <returns>
            True if both operand represents the same duration.
            </returns>
        </member>
        <member name="M:NFluent.Helpers.Duration.op_Inequality(NFluent.Helpers.Duration,NFluent.Helpers.Duration)">
            <summary>
            Checks if the duration is different from another object.
            </summary>
            <param name="left">
            First comparand.
            </param>
            <param name="right">
            Second comparand.
            </param>
            <returns>
            True if both operand represents different duration.
            </returns>
        </member>
        <member name="M:NFluent.Helpers.Duration.Equals(NFluent.Helpers.Duration)">
            <summary>
            Checks if the duration is equal to another one.
            </summary>
            <param name="other">The duration to compare to.</param>
            <returns>True if both Durations represents the same duration.</returns>
        </member>
        <member name="M:NFluent.Helpers.Duration.Equals(System.Object)">
            <summary>
            Checks if the duration is equal to another object.
            </summary>
            <param name="obj">The duration to compare to.</param>
            <returns>True if both Durations represents the same duration.</returns>
        </member>
        <member name="M:NFluent.Helpers.Duration.GetHashCode">
            <summary>
            Gets the hash value of this instance.
            </summary>
            <returns>
            A 32 bits integer representing the hash value.
            </returns>
        </member>
        <member name="M:NFluent.Helpers.Duration.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:NFluent.Helpers.Duration.ConvertTo(NFluent.TimeUnit)">
            <summary>
            Gets a new instance for the same duration expressed in another <see cref="T:NFluent.TimeUnit"/>
            </summary>
            <param name="newTmeUnit">The target time unit.</param>
            <returns>The new <see cref="T:NFluent.Helpers.Duration"/>.</returns>
        </member>
        <member name="M:NFluent.Helpers.Duration.ToMilliseconds">
            <summary>
            Gets the duration as a number of milliseconds
            </summary>
            <returns></returns>
        </member>
        <member name="T:NFluent.Helpers.EqualityHelper">
            <summary>
                Helper class related to Equality methods (used like a traits).
            </summary>
        </member>
        <member name="T:NFluent.Helpers.ExceptionHelper">
            <summary>
            Offer factory services to get adequate exception type depending on testing framework.
            </summary>
        </member>
        <member name="M:NFluent.Helpers.ExceptionHelper.BuildException(System.String)">
            <summary>
            Builds an exception with the given message. Automatically detect the exception type to use depending on the used check framework.
            </summary>
            <param name="theMessage">The message to build the exception with.</param>
            <returns>An exception instance of the appropriate type with the given message.</returns>
        </member>
        <member name="M:NFluent.Helpers.ExceptionHelper.IsFailedException(System.Object)">
            <summary>
            Checks if an object is an instance of a failed assertion exception.
            </summary>
            <param name="exc">Exception to check</param>
            <returns>true if the exception is of a correct type</returns>
        </member>
        <member name="T:NFluent.Helpers.ExceptionHelper.ExceptionConstructor">
            <summary>
            Stores adequate constructors.
            </summary>
        </member>
        <member name="M:NFluent.Helpers.ExceptionHelper.DumpInnerExceptionStackTrace(System.Exception)">
            <summary>
            Return a string containing the complete stack trace of the InnerExceptions for the given Exception.
            </summary>
            <param name="exception">The exception.</param>
            <returns>A string containing the complete stack trace of the InnerExceptions for the given Exception.</returns>
        </member>
        <member name="T:NFluent.Helpers.IsInstanceHelper">
            <summary>
            Helper class related to Is(Not)Instance methods (used like a traits).
            </summary>
        </member>
        <member name="M:NFluent.Helpers.IsInstanceHelper.InheritsFrom``1(NFluent.ICheck{``0},System.Type)">
            <summary>
            Checks that an instance is in the inheritance hierarchy of a specified type.
            </summary>
            <param name="checker">The instance to be checked.</param>
            <param name="expectedBaseType">The Type which is expected to be a base Type of the instance.</param>
            <exception cref="T:NFluent.FluentCheckException">The instance is not in the inheritance hierarchy of the specified type.</exception>
        </member>
        <member name="T:NFluent.Helpers.DifferenceMode">
            <summary>
            Describes difference between strings.
            </summary>
        </member>
        <member name="F:NFluent.Helpers.DifferenceMode.NoDifference">
            <summary>
            Strings are same.
            </summary>
        </member>
        <member name="F:NFluent.Helpers.DifferenceMode.General">
            <summary>
            General difference.
            </summary>
        </member>
        <member name="F:NFluent.Helpers.DifferenceMode.CaseDifference">
            <summary>
            Difference only in case (e.g. Foo vs foo).
            </summary>
        </member>
        <member name="F:NFluent.Helpers.DifferenceMode.LongerLine">
            <summary>
            Contains at least one longer line.
            </summary>
        </member>
        <member name="F:NFluent.Helpers.DifferenceMode.ShorterLine">
            <summary>
            Contains at least one shorter line. 
            </summary>
        </member>
        <member name="F:NFluent.Helpers.DifferenceMode.EndOfLine">
            <summary>
            End of line marker is different.
            </summary>
        </member>
        <member name="F:NFluent.Helpers.DifferenceMode.MissingLines">
            <summary>
            Line(s) are missing.
            </summary>
        </member>
        <member name="F:NFluent.Helpers.DifferenceMode.ExtraLines">
            <summary>
            Extra lines found.
            </summary>
        </member>
        <member name="F:NFluent.Helpers.DifferenceMode.Spaces">
            <summary>
            Different in spaces (one vs many, tabs vs spaces...).
            </summary>
        </member>
        <member name="F:NFluent.Helpers.DifferenceMode.Longer">
            <summary>
            String is longer.
            </summary>
        </member>
        <member name="F:NFluent.Helpers.DifferenceMode.Shorter">
            <summary>
            String is shorter.
            </summary>
        </member>
        <member name="F:NFluent.Helpers.DifferenceMode.GeneralSameLength">
            <summary>
            Strings have the same length but are different.
            </summary>
        </member>
        <member name="M:NFluent.Helpers.StringDifference.Summarize(System.Collections.Generic.IEnumerable{NFluent.Helpers.StringDifference})">
            <summary>
            Summarize a list of issues to a single difference code.
            </summary>
            <param name="stringDifferences">
            List of differences.
            </param>
            <returns>
            A <see cref="T:NFluent.Helpers.DifferenceMode"/> value describing the overall differences.
            </returns>
            <remarks>
            Returns <see cref="F:NFluent.Helpers.DifferenceMode.General"/> unless all differences are of same kind.
            </remarks>
        </member>
        <member name="M:NFluent.Helpers.StringDifference.HighLightForDifference(System.String)">
            <summary>
            Transform a string to identify not printabme difference
            </summary>
            <param name="texte"></param>
            <returns></returns>
        </member>
        <member name="M:NFluent.Helpers.StringDifference.HighlightCrlfOrLfIfAny(System.String)">
            <summary>
            Inserts &lt;&lt;CRLF&gt;&gt; before the first CRLF or &lt;&lt;LF&gt;&gt; before the first LF.
            </summary>
            <param name="str">The string.</param>
            <returns>The same string but with &lt;&lt;CRLF&gt;&gt; inserted before the first CRLF or &lt;&lt;LF&gt;&gt; inserted before the first LF.</returns>
        </member>
        <member name="M:NFluent.Helpers.StringDifference.HighlightTabsIfAny(System.String)">
            <summary>
            Replace every tab char by "&lt;&lt;tab&gt;&gt;".
            </summary>
            <param name="str">The original string.</param>
            <returns>The original string with every \t replaced with "&lt;&lt;tab&gt;&gt;".</returns>
        </member>
        <member name="M:NFluent.Helpers.StringDifference.GetMessage(NFluent.Helpers.DifferenceMode)">
            <summary>
            Get general message
            </summary>
            <param name="summary">Synthetic error</param>
            <returns></returns>
        </member>
        <member name="T:NFluent.Helpers.TimeHelper">
            <summary>
            Static class hosting various time helper.
            </summary>
        </member>
        <member name="M:NFluent.Helpers.TimeHelper.GetInNanoSeconds(System.Double,NFluent.TimeUnit)">
            <summary>
            Converts a duration in nanoseconds.
            </summary>
            <param name="value">Number of time units.</param>
            <param name="unit">Time unit in which duration is expressed.</param>
            <returns>
            The number of nanoseconds.
            </returns>
            <exception cref="T:System.InvalidOperationException">Raised if time unit is not recognized.</exception>
        </member>
        <member name="M:NFluent.Helpers.TimeHelper.GetInTicks(System.Int64,NFluent.TimeUnit)">
            <summary>
            Get a duration in 'ticks'
            </summary>
            <param name="value">original value</param>
            <param name="unit">time unit</param>
            <returns>Number of ticks</returns>
        </member>
        <member name="M:NFluent.Helpers.TimeHelper.GetFromNanoSeconds(System.Double,NFluent.TimeUnit)">
            <summary>
            Converts a duration in nanoseconds to the desired <see cref="T:NFluent.TimeUnit"/>.
            </summary>
            <param name="duration">
            The duration in nanoseconds.
            </param>
            <param name="timeUnit">
            The time unit desired.
            </param>
            <returns>
            The duration expressed in the desired unit.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            Raised if time unit is not recognized.
            </exception>
        </member>
        <member name="M:NFluent.Helpers.TimeHelper.ToTimeSpan(System.Double,NFluent.TimeUnit)">
            <summary>
            Creates a <see cref="T:System.TimeSpan"/> representing the duration expressed in <see cref="T:NFluent.TimeUnit"/>.
            </summary>
            <param name="value">
            Duration duration.
            </param>
            <param name="timeUnit">
            Duration unit.
            </param>
            <returns>
            A <see cref="T:System.TimeSpan"/> instance of that duration.
            </returns>
            <exception cref="T:System.InvalidOperationException">Raised if time unit is not recognized.</exception>
        </member>
        <member name="M:NFluent.Helpers.TimeHelper.Convert(System.TimeSpan,NFluent.TimeUnit)">
            <summary>
            Expresses a <see cref="T:System.TimeSpan"/> duration in the desired <see cref="T:NFluent.TimeUnit"/>.
            </summary>
            <param name="value">Duration to convert.</param>
            <param name="unit"><see cref="T:NFluent.TimeUnit"/> to convert to.</param>
            <returns>The duration in <see cref="T:NFluent.TimeUnit"/>.</returns>
            <exception cref="T:System.InvalidOperationException">Raised if time unit is not recognized.</exception>
        </member>
        <member name="M:NFluent.Helpers.TimeHelper.DiscoverUnit(System.TimeSpan)">
            <summary>
            Discover the most appropriate <see cref="T:NFluent.TimeUnit"/> to express the given duration.
            </summary>
            <param name="timeSpan">
            Duration to analyze.
            </param>
            <returns>
            The most appropriate <see cref="T:NFluent.TimeUnit"/>.
            </returns>
        </member>
        <member name="T:NFluent.IntCheckExtensions">
            <summary>
            Provides check methods to be executed on an <see cref="T:System.Int32"/> value.
            </summary>
        </member>
        <member name="M:NFluent.IntCheckExtensions.IsBefore(NFluent.ICheck{System.Int32},System.Int32)">
            <summary>
            Determines whether the specified value is before the other one.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <param name="givenValue">The other value.</param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The current value is not before the other one.</exception>
        </member>
        <member name="M:NFluent.IntCheckExtensions.IsAfter(NFluent.ICheck{System.Int32},System.Int32)">
            <summary>
            Determines whether the specified value is after the other one.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <param name="givenValue">The other value.</param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The current value is not after the other one.</exception>
        </member>
        <member name="M:NFluent.IntCheckExtensions.IsZero(NFluent.ICheck{System.Int32})">
            <summary>
            Checks that the actual value is equal to zero.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The value is not equal to zero.</exception>
        </member>
        <member name="M:NFluent.IntCheckExtensions.HasAValue(NFluent.ICheck{System.Nullable{System.Int32}})">
            <summary>
            Checks that the actual nullable value has a value and thus, is not null.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <returns>A check link.</returns>
            <exception cref="T:NFluent.FluentCheckException">The value is null.</exception>
        </member>
        <member name="M:NFluent.IntCheckExtensions.HasNoValue(NFluent.ICheck{System.Nullable{System.Int32}})">
            <summary>
            Checks that the actual nullable value has no value and thus, is null. 
            Note: this method does not return A check link since the nullable is null.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <exception cref="T:NFluent.FluentCheckException">The value is not null.</exception>
        </member>
        <member name="M:NFluent.IntCheckExtensions.IsNotZero(NFluent.ICheck{System.Int32})">
            <summary>
            Checks that the actual value is NOT equal to zero.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <returns>
              <returns>A check link.</returns>
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The value is equal to zero.</exception>
        </member>
        <member name="M:NFluent.IntCheckExtensions.IsLessThan(NFluent.ICheck{System.Int32},System.Int32)">
            <summary>
            Checks that the actual value is less than an operand.
            </summary>
            <param name="check">
            The fluent check to be extended.
            </param>
            <param name="comparand">
            Comparand to compare the value to.
            </param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">
            The value is not less than the comparand.
            </exception>
        </member>
        <member name="M:NFluent.IntCheckExtensions.IsStrictlyLessThan(NFluent.ICheck{System.Int32},System.Int32)">
            <summary>
            Checks that the checked value is strictly less than the comparand.
            </summary>
            <param name="check">
            The fluent check to be extended.
            </param>
            <param name="comparand">
            Comparand to compare the value to.
            </param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">
            The value is not strictly less than the comparand.
            </exception>
        </member>
        <member name="M:NFluent.IntCheckExtensions.IsGreaterThan(NFluent.ICheck{System.Int32},System.Int32)">
            <summary>
            Checks that the actual value is more than an operand.
            </summary>
            <param name="check">
            The fluent check to be extended.
            </param>
            <param name="comparand">
            Comparand to compare the value to.
            </param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">
            The value is not less than the comparand.
            </exception>
        </member>
        <member name="M:NFluent.IntCheckExtensions.IsStrictlyGreaterThan(NFluent.ICheck{System.Int32},System.Int32)">
            <summary>
            Checks that the checked value is strictly greater than the comparand.
            </summary>
            <param name="check">
            The fluent check to be extended.
            </param>
            <param name="comparand">
            Comparand to compare the value to.
            </param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">
            The checked value is not strictly greater than the comparand.
            </exception>
        </member>
        <member name="M:NFluent.IntCheckExtensions.IsEqualTo(NFluent.ICheck{System.Int32},System.Int32)">
            <summary>
            Checks that the actual value is equal to another expected value.
            </summary>
            <param name="check">
            The fluent check to be extended.
            </param>
            <param name="expected">
            The expected value.
            </param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">
            The actual value is not equal to the expected value.
            </exception>
        </member>
        <member name="T:NFluent.IntSignedCheckExtensions">
            <summary>
            Provides check methods to be executed on an <see cref="T:System.Int32"/> value that is considered as a signed number.
            </summary>
        </member>
        <member name="M:NFluent.IntSignedCheckExtensions.IsPositive(NFluent.ICheck{System.Int32})">
            <summary>
            Checks that the actual value is strictly positive.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The value is not strictly positive.</exception>
        </member>
        <member name="M:NFluent.IntSignedCheckExtensions.IsStrictlyPositive(NFluent.ICheck{System.Int32})">
            <summary>
            Checks that the actual value is strictly positive.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The value is not strictly positive.</exception>
        </member>
        <member name="M:NFluent.IntSignedCheckExtensions.IsPositiveOrZero(NFluent.ICheck{System.Int32})">
            <summary>
            Checks that the actual value is positive or equal to zero.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The value is not positive or equal to zero.</exception>
        </member>
        <member name="M:NFluent.IntSignedCheckExtensions.IsNegative(NFluent.ICheck{System.Int32})">
            <summary>
            Checks that the actual value is strictly negative.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The value is not strictly negative.</exception>
        </member>
        <member name="M:NFluent.IntSignedCheckExtensions.IsStrictlyNegative(NFluent.ICheck{System.Int32})">
            <summary>
            Checks that the actual value is strictly negative.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The value is not strictly negative.</exception>
        </member>
        <member name="M:NFluent.IntSignedCheckExtensions.IsNegativeOrZero(NFluent.ICheck{System.Int32})">
            <summary>
            Checks that the actual value is negative or equal to zero.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The value is not negative or equal to zero.</exception>
        </member>
        <member name="T:NFluent.LambdaExceptionCheck`1">
            <summary>
            Implements specific Value check after lambda checks.
            </summary>
            <typeparam name="T">Code checker type./>.
            </typeparam>
        </member>
        <member name="M:NFluent.LambdaExceptionCheck`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:NFluent.LambdaExceptionCheck`1"/> class.
            This check can only be fluently called after a lambda check.
            </summary>
            <param name="value">The Value.</param>
        </member>
        <member name="M:NFluent.LambdaExceptionCheck`1.DueTo``1">
            <inheritdoc />
        </member>
        <member name="M:NFluent.LambdaExceptionCheck`1.ForkInstance">
            <inheritdoc />
        </member>
        <member name="P:NFluent.LambdaExceptionCheck`1.Value">
            <inheritdoc />
        </member>
        <member name="T:NFluent.ExceptionChecks">
            <summary>
            Hosts Exception related checks
            </summary>
        </member>
        <member name="M:NFluent.ExceptionChecks.WithMessage``1(NFluent.ILambdaExceptionCheck{``0},System.String)">
            <summary>
            Checks if the exception has a specific message.
            </summary>
            <param name="checker">Syntax helper</param>
            <param name="exceptionMessage">Exptected message</param>
            <typeparam name="T">Exception type</typeparam>
            <returns>A chainable check.</returns>
            <exception cref="T:NFluent.FluentCheckException"></exception>
        </member>
        <member name="M:NFluent.ExceptionChecks.WithProperty``2(NFluent.ILambdaExceptionCheck{``0},System.String,``1)">
            <summary>
            Checks if the exception has a specific property having a specific value.
            </summary>
            <typeparam name="T">Exception type</typeparam>
            <typeparam name="TP">Property type</typeparam>
            <param name="checker">Syntax helper</param>
            <param name="propertyName">Name of property</param>
            <param name="propertyValue">Expected valued of property</param>
            <returns>A chainable check.</returns>
        </member>
        <member name="M:NFluent.ExceptionChecks.DueToAnyFrom``1(NFluent.ILambdaExceptionCheck{``0},System.Type[])">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="types"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="T:NFluent.ObjectCheckExtensions">
            <summary>
            Provides check methods to be executed on an object instance.
            </summary>
        </member>
        <member name="M:NFluent.ObjectCheckExtensions.IsEqualTo``1(NFluent.ICheck{``0},System.Object)">
            <summary>
            Checks that the actual value is equal to another expected value.
            </summary>
            <typeparam name="T">
            Type of the checked value.
            </typeparam>
            <param name="check">
            The fluent check to be extended.
            </param>
            <param name="expected">
            The expected value.
            </param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">
            The actual value is not equal to the expected value.
            </exception>
        </member>
        <member name="M:NFluent.ObjectCheckExtensions.IsDefaultValue``1(NFluent.ICheck{``0})">
            <summary>
            Check if sut is the default value.
            </summary>
            <typeparam name="T">Type of the checked value.</typeparam>
            <param name="context">Context of check (as built by s<see cref="M:NFluent.Check.That``1(``0)"/>.</param>
            <returns>A check link.</returns>
        </member>
        <member name="M:NFluent.ObjectCheckExtensions.IsOneOf``1(NFluent.ICheck{``0},``0[])">
            <summary>
            Checks that the actual value is one of the legal values.
            </summary>
            <typeparam name="T">Type of the checked value.</typeparam>
            <param name="check">The fluent check context object.</param>
            <param name="values">List of possible values.</param>
            <returns>A check link</returns>
        </member>
        <member name="M:NFluent.ObjectCheckExtensions.HasSameValueAs``2(NFluent.ICheck{``0},``1)">
            <summary>
            Checks that the actual value is equal to another expected value using operator==.
            </summary>
            <typeparam name="T">
            Type of the checked value.
            </typeparam>
            <typeparam name="TU">Type of the expected value</typeparam>
            <param name="check">
            The fluent check to be extended.
            </param>
            <param name="expected">
            The expected value.
            </param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">
            The actual value is not equal to the expected value.
            </exception>
        </member>
        <member name="M:NFluent.ObjectCheckExtensions.HasDifferentValueThan``2(NFluent.ICheck{``0},``1)">
            <summary>
            Checks that the actual value is different from another expected value using operator!=.
            </summary>
            <typeparam name="T">
            Type of the checked value.
            </typeparam>
            <typeparam name="TU">Type of the expected value.</typeparam>
            <param name="check">
            The fluent check to be extended.
            </param>
            <param name="expected">
            The expected value.
            </param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">
            The actual value is equal to the expected value.
            </exception>
        </member>
        <member name="M:NFluent.ObjectCheckExtensions.IsNotEqualTo``1(NFluent.ICheck{``0},System.Object)">
            <summary>
            Checks that the actual value is not equal to another expected value.
            </summary>
            <typeparam name="T">
            Type of the checked value.
            </typeparam>
            <param name="check">The fluent check to be extended.</param>
            <param name="expected">The expected value.</param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The actual value is equal to the expected value.</exception>
        </member>
        <member name="M:NFluent.ObjectCheckExtensions.IsNotEqualTo``1(NFluent.ICheck{``0},``0)">
            <summary>
            Checks that the actual value is not equal to another expected value.
            </summary>
            <typeparam name="T">
            Type of the checked value.
            </typeparam>
            <param name="check">The fluent check to be extended.</param>
            <param name="expected">The expected value.</param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The actual value is equal to the expected value.</exception>
        </member>
        <member name="M:NFluent.ObjectCheckExtensions.InheritsFrom``1(NFluent.ICheck{System.Object})">
            <summary>
            Checks that the actual expression is in the inheritance hierarchy of the given kind or of the same kind.
            </summary>
            <typeparam name="T">The Type which is expected to be a base Type of the actual expression.</typeparam>
            <param name="check">The fluent check to be extended.</param>
            <exception cref="T:NFluent.FluentCheckException">The checked expression is not in the inheritance hierarchy of the given kind.</exception>
        </member>
        <member name="M:NFluent.ObjectCheckExtensions.InheritsFromType``1(NFluent.ICheck{``0},System.Type)">
            <summary>
            Checks that the actual expression is in the inheritance hierarchy of the given kind or of the same kind.
            </summary>
            <typeparam name="T">Type of SUT</typeparam>
            <param name="check">The fluent check to be extended.</param>
            <param name="parentType">Expected type that should be^part of hierarchy</param>
            <returns>a check link object</returns>
        </member>
        <member name="M:NFluent.ObjectCheckExtensions.IsNull``1(NFluent.ICheck{``0})">
            <summary>
            Checks that the actual expression is null.
            </summary>
            <typeparam name="T">
            Type of the checked value.
            </typeparam>
            <param name="check">The fluent check to be extended.</param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The checked value is not null.</exception>
        </member>
        <member name="M:NFluent.ObjectCheckExtensions.IsNull``1(NFluent.ICheck{System.Nullable{``0}})">
            <summary>
            Checks that the actual Nullable value is null.
            </summary>
            <typeparam name="T">
            Type of the checked value.
            </typeparam>
            <param name="check">The fluent check to be extended.</param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The checked value is not null.</exception>
        </member>
        <member name="M:NFluent.ObjectCheckExtensions.IsNotNull``1(NFluent.ICheck{System.Nullable{``0}})">
            <summary>
            Checks that the actual Nullable value is not null.
            </summary>
            <typeparam name="T">
            Type of the checked value.
            </typeparam>
            <param name="check">The fluent check to be extended.</param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The checked value is null.</exception>
        </member>
        <member name="M:NFluent.ObjectCheckExtensions.IsNotNull``1(NFluent.ICheck{``0})">
            <summary>
            Checks that the actual expression is not null.
            </summary>
            <typeparam name="T">
            Type of the checked value.
            </typeparam>
            <param name="check">The fluent check to be extended.</param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">Is the value is null.</exception>
        </member>
        <member name="M:NFluent.ObjectCheckExtensions.IsSameReferenceThan``2(NFluent.ICheck{``0},``1)">
            <summary>
            Obsolete. Use <see cref="M:NFluent.ObjectCheckExtensions.IsSameReferenceAs``2(NFluent.ICheck{``0},``1)"/> instead. 
            Checks that the actual value has an expected reference.
            </summary>
            <typeparam name="T">
            Type of the checked value.
            </typeparam>
            <typeparam name="TU">Type of expected reference</typeparam>
            <param name="check">The fluent check to be extended.</param>
            <param name="expected">The expected object.</param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The actual value is not the same reference than the expected value.</exception>
        </member>
        <member name="M:NFluent.ObjectCheckExtensions.IsSameReferenceAs``2(NFluent.ICheck{``0},``1)">
            <summary>
            Checks that the actual value has an expected reference.
            </summary>
            <typeparam name="T">
            Type of the checked value.
            </typeparam>
            <typeparam name="TU">Type of expeted reference</typeparam>
            <param name="check">The fluent check to be extended.</param>
            <param name="expected">The expected object.</param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The actual value is not the same reference than the expected value.</exception>
        </member>
        <member name="M:NFluent.ObjectCheckExtensions.IsDistinctFrom``2(NFluent.ICheck{``0},``1)">
            <summary>
            Checks that the actual value is a different instance than a comparand.
            </summary>
            <typeparam name="T">
            Type of the checked value.
            </typeparam>
            <typeparam name="TU">Type of reference value.</typeparam>
            <param name="check">The fluent check to be extended.</param>
            <param name="comparand">The expected value to be distinct from.</param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The actual value is the same instance than the comparand.</exception>
        </member>
        <member name="T:NFluent.ObjectFieldsCheckExtensions">
            <summary>
                Provides check methods to be executed on an object instance.
            </summary>
        </member>
        <member name="M:NFluent.ObjectFieldsCheckExtensions.HasFieldsEqualToThose(NFluent.ICheck{System.Object},System.Object)">
            <summary>
                Checks that the actual actualValue has fields equals to the expected actualValue ones.
            </summary>
            <param name="check">
                The fluent check to be extended.
            </param>
            <param name="expected">
                The expected actualValue.
            </param>
            <returns>
                A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">
                The actual actualValue doesn't have all fields equal to the expected actualValue ones.
            </exception>
            <remarks>
                The comparison is done field by field.
            </remarks>
        </member>
        <member name="M:NFluent.ObjectFieldsCheckExtensions.HasFieldsNotEqualToThose(NFluent.ICheck{System.Object},System.Object)">
            <summary>
                Checks that the actual actualValue doesn't have all fields equal to the expected actualValue ones.
            </summary>
            <param name="check">
                The fluent check to be extended.
            </param>
            <param name="expected">
                The expected actualValue.
            </param>
            <returns>
                A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">
                The actual actualValue has all fields equal to the expected actualValue ones.
            </exception>
            <remarks>
                The comparison is done field by field.
            </remarks>
        </member>
        <member name="M:NFluent.ObjectFieldsCheckExtensions.HasFieldsWithSameValues``2(NFluent.ICheck{``0},``1)">
            <summary>
                Checks that the actual actualValue has fields equals to the expected actualValue ones.
            </summary>
            <typeparam name="T">
                Type of the checked actualValue.
            </typeparam>
            <typeparam name="TU">Type of the expected actualValue.</typeparam>
            <param name="check">
                The fluent check to be extended.
            </param>
            <param name="expected">
                The expected actualValue.
            </param>
            <returns>
                A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">
                The actual actualValue doesn't have all fields equal to the expected actualValue ones.
            </exception>
            <remarks>
                The comparison is done field by field.
            </remarks>
        </member>
        <member name="M:NFluent.ObjectFieldsCheckExtensions.HasNotFieldsWithSameValues``1(NFluent.ICheck{``0},System.Object)">
            <summary>
                Checks that the actual actualValue doesn't have all fields equal to the expected actualValue ones.
            </summary>
            <typeparam name="T">
                Type of the checked actualValue.
            </typeparam>
            <param name="check">
                The fluent check to be extended.
            </param>
            <param name="expected">
                The expected actualValue.
            </param>
            <returns>
                A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">
                The actual actualValue has all fields equal to the expected actualValue ones.
            </exception>
            <remarks>
                The comparison is done field by field.
            </remarks>
        </member>
        <member name="M:NFluent.ObjectFieldsCheckExtensions.Considering``1(NFluent.ICheck{``0})">
            <summary>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="check"></param>
            <returns></returns>
        </member>
        <member name="T:NFluent.StreamCheckExtensions">
            <summary>
            Provides check methods to be executed on a stream instance.
            </summary>
        </member>
        <member name="M:NFluent.StreamCheckExtensions.HasSameSequenceOfBytesAs(NFluent.ICheck{System.IO.Stream},System.IO.Stream)">
            <summary>
            Checks that the actual stream has the same content as another one.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <param name="expected">The stream to compare content with.</param>
            <returns>A check link</returns>
        </member>
        <member name="T:NFluent.StringCheckExtensions">
            <summary>
            Provides check methods to be executed on a string instance.
            </summary>
        </member>
        <member name="M:NFluent.StringCheckExtensions.IsEqualTo(NFluent.ICheck{System.String},System.String)">
            <summary>
                Checks that the checker value is equal to another expected value.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <param name="expected">The expected value.</param>
            <returns>
                A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The checker value is not equal to the expected value.</exception>
        </member>
        <member name="M:NFluent.StringCheckExtensions.IsNotEqualTo(NFluent.ICheck{System.String},System.Object)">
            <summary>
                Checks that the checker value is not equal to another expected value.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <param name="expected">The expected value.</param>
            <returns>
                A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The checker value is equal to the expected value.</exception>
        </member>
        <member name="M:NFluent.StringCheckExtensions.IsNotEqualTo(NFluent.ICheck{System.String},System.String)">
            <summary>
                Checks that the checker value is not equal to another expected value.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <param name="expected">The expected value.</param>
            <returns>
                A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The checker value is equal to the expected value.</exception>
        </member>
        <member name="M:NFluent.StringCheckExtensions.IsEqualTo(NFluent.ICheck{System.String},System.Object)">
            <summary>
            Checks that the checker value is equal to another expected value.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <param name="expected">The expected value.</param>
            <returns>
             A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The checker value is not equal to the expected value.</exception>
        </member>
        <member name="M:NFluent.StringCheckExtensions.IsEqualIgnoringCase(NFluent.ICheck{System.String},System.String)">
            <summary>
            Checks that the string is equals to another one, disregarding case.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <param name="comparand">The string to compare to.</param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The string is not equal to the comparand.</exception>
        </member>
        <member name="M:NFluent.StringCheckExtensions.IsOneOfThese(NFluent.ICheck{System.String},System.String[])">
            <summary>
                Checks that the checker value is one of these possible elements.
            </summary>
            <param name="check">The check.</param>
            <param name="possibleElements">The possible elements.</param>
            <returns>
                A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The checker value is NOT one of the elements.</exception>
        </member>
        <member name="M:NFluent.StringCheckExtensions.Contains(NFluent.ICheck{System.String},System.String[])">
            <summary>
                Checks that the string contains the given expected values, in any order.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <param name="values">The expected values to be found.</param>
            <returns>
                A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The string  contains all the given strings in any order.</exception>
        </member>
        <member name="M:NFluent.StringCheckExtensions.DoesNotContain(NFluent.ICheck{System.String},System.String[])">
            <summary>
                Checks that the string does not contain any of the given expected values.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <param name="values">The values not to be present.</param>
            <returns>
                A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The string contains at least one of the given strings.</exception>
        </member>
        <member name="M:NFluent.StringCheckExtensions.StartsWith(NFluent.ICheck{System.String},System.String)">
            <summary>
                Checks that the string starts with the given expected prefix.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <param name="expectedPrefix">The expected prefix.</param>
            <returns>
                A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The string does not start with the expected prefix.</exception>
        </member>
        <member name="M:NFluent.StringCheckExtensions.EndsWith(NFluent.ICheck{System.String},System.String)">
            <summary>
                Checks that the string ends with the given expected suffix.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <param name="expectedEnd">The expected suffix.</param>
            <returns>
                A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The string does not end with the expected prefix.</exception>
        </member>
        <member name="M:NFluent.StringCheckExtensions.Matches(NFluent.ICheck{System.String},System.String)">
            <summary>
            Checks that the string matches a given regular expression.
            </summary>
            <param name="context">The fluent check to be extended.</param>
            <param name="regExp">The regular expression.</param>
            <returns>
                A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The string does not end with the expected prefix.</exception>
        </member>
        <member name="M:NFluent.StringCheckExtensions.MatchesWildcards(NFluent.ICheck{System.String},System.String)">
            <summary>
            Checks that the string matches a given expression with wildcard.
            </summary>
            <param name="context">The fluent check to be extended.</param>
            <param name="expression">The regular expression.</param>
            <returns>
                A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The string does not end with the expected prefix.</exception>
        </member>
        <member name="M:NFluent.StringCheckExtensions.DoesNotMatch(NFluent.ICheck{System.String},System.String)">
            <summary>
                Checks that the string does not match a given regular expression.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <param name="regExp">The regular expression prefix.</param>
            <returns>
                A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The string does not end with the expected prefix.</exception>
        </member>
        <member name="M:NFluent.StringCheckExtensions.IsNullOrWhiteSpace(NFluent.ICheck{System.String})">
            <summary>
                Checks that the string is null, empty or only spaces.
            </summary>
            <param name="check">The fluent check.</param>
            <returns>
                A check link.
            </returns>
        </member>
        <member name="M:NFluent.StringCheckExtensions.IsEmpty(NFluent.ICheck{System.String})">
            <summary>
                Checks that the string is empty.
            </summary>
            <param name="check">The fluent check.</param>
            <returns>
                A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The string is not empty.</exception>
        </member>
        <member name="M:NFluent.StringCheckExtensions.IsNullOrEmpty(NFluent.ICheck{System.String})">
            <summary>
                Checks that the string is empty or null.
            </summary>
            <param name="check">The fluent check.</param>
            <returns>
                A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The string is neither empty or null.</exception>
        </member>
        <member name="M:NFluent.StringCheckExtensions.IsNotEmpty(NFluent.ICheck{System.String})">
            <summary>
                Checks that the string is not empty.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <returns>
                A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The string is empty.</exception>
        </member>
        <member name="M:NFluent.StringCheckExtensions.HasContent(NFluent.ICheck{System.String})">
            <summary>
                Checks that the string has content.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <returns>
                A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The string is empty or null.</exception>
        </member>
        <member name="M:NFluent.StringCheckExtensions.AsLines(NFluent.ICheck{System.String})">
            <summary>
                Convert a string to an array of lines.
            </summary>
            <param name="check">The fluent check to be processed.</param>
            <returns>A checker.</returns>
        </member>
        <member name="T:NFluent.StringFluentSyntaxExtension">
            <summary>
            Provides extension method on a ICheckLink for IEnumerable types.
            </summary>
        </member>
        <member name="M:NFluent.StringFluentSyntaxExtension.Once(NFluent.IExtendableCheckLink{System.String,System.String[]})">
            <summary>
            Checks that the checked <see cref="T:System.String"/> contains the expected list of strings only once.
            </summary>
            <param name="chainedCheckLink">
            The chained fluent check.
            </param>
            <returns>
            A check link.
            </returns>
        </member>
        <member name="M:NFluent.StringFluentSyntaxExtension.InThatOrder(NFluent.IExtendableCheckLink{System.String,System.String[]})">
            <summary>
            Checks that the checked <see cref="T:System.String"/> contains the expected list of strings in the correct order.
            </summary>
            <param name="chainedCheckLink">
            The chained fluent check.
            </param>
            <returns>
            A check link.
            </returns>
        </member>
        <member name="T:NFluent.StructCheckExtensions">
            <summary>
            Provides check methods to be executed on an struct instance.
            </summary>
        </member>
        <member name="M:NFluent.StructCheckExtensions.IsEqualTo``1(NFluent.IStructCheck{``0},``0)">
            <summary>
            Checks that the actual value is equal to another expected value.
            </summary>
            <typeparam name="T">Type of the struct or the enum to assert on.</typeparam>
            <param name="check">The fluent fluent check.</param>
            <param name="expected">The expected value.</param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The actual value is not equal to the expected value.</exception>
        </member>
        <member name="M:NFluent.StructCheckExtensions.IsNotEqualTo``1(NFluent.IStructCheck{``0},System.Object)">
            <summary>
            Checks that the actual value is not equal to another expected value.
            </summary>
            <typeparam name="T">Type of the struct or the enum to assert on.</typeparam>
            <param name="check">The fluent check to be extended.</param>
            <param name="expected">The expected value.</param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The actual value is equal to the expected value.</exception>
        </member>
        <member name="T:NFluent.TimeSpanCheckExtensions">
            <summary>
            Provides check methods to be executed on an <see cref="T:System.TimeSpan"/> instance.
            </summary>
        </member>
        <member name="M:NFluent.TimeSpanCheckExtensions.IsLessThan(NFluent.ICheck{System.TimeSpan},System.Double,NFluent.TimeUnit)">
            <summary>
            Checks that the actual duration is less (strictly) than a comparand.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <param name="providedDuration">The duration to compare to.</param>
            <param name="unit">The unit in which the duration is expressed.</param>
            <returns>A check link.</returns>
            <exception cref="T:NFluent.FluentCheckException">The actual value is not less than the provided duration.</exception>
        </member>
        <member name="M:NFluent.TimeSpanCheckExtensions.IsLessThan(NFluent.ICheck{System.TimeSpan},System.TimeSpan)">
            <summary>
            Checks that the actual duration is less (strictly) than a comparand.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <param name="comparand">The value to compare to.</param>
            <returns>A check link.</returns>
            <exception cref="T:NFluent.FluentCheckException">The actual value is not less than the provided comparand.</exception>
        </member>
        <member name="M:NFluent.TimeSpanCheckExtensions.IsGreaterThan(NFluent.ICheck{System.TimeSpan},System.Double,NFluent.TimeUnit)">
            <summary>
            Checks that the actual duration is greater (strictly) than a comparand.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <param name="providedDuration">The duration to compare to.</param>
            <param name="unit">The unit in which the duration is expressed.</param>
            <returns>A check link.</returns>
            <exception cref="T:NFluent.FluentCheckException">The actual value is not greater than the provided comparand.</exception>
        </member>
        <member name="M:NFluent.TimeSpanCheckExtensions.IsGreaterThan(NFluent.ICheck{System.TimeSpan},System.TimeSpan)">
            <summary>
            Checks that the actual duration is greater (strictly) than a comparand.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <param name="comparand">The value to compare to.</param>
            <returns>A check link.</returns>
            <exception cref="T:NFluent.FluentCheckException">The actual value is not greater than the provided comparand.</exception>
        </member>
        <member name="M:NFluent.TimeSpanCheckExtensions.IsEqualTo(NFluent.ICheck{System.TimeSpan},System.Double,NFluent.TimeUnit)">
            <summary>
            Checks that the actual duration is equal to a target duration.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <param name="duration">The duration to be compared to.</param>
            <param name="unit">The <see cref="T:NFluent.TimeUnit" /> in which duration is expressed.</param>
            <returns>A check link.</returns>
            <exception cref="T:NFluent.FluentCheckException">The actual value is not equal to the target duration.</exception>
        </member>
        <member name="M:NFluent.TimeSpanCheckExtensions.IsEqualTo(NFluent.ICheck{System.TimeSpan},System.TimeSpan)">
            <summary>
            Checks that the actual duration is equal to a target duration.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <param name="comparand">The duration to be compared to.</param>
            <returns>A check link.</returns>
            /// <exception cref="T:NFluent.FluentCheckException">The actual value is not equal to the target duration.</exception>
        </member>
        <member name="T:NFluent.TypeCheckExtensions">
            <summary>
            This class hosts Type related checks.
            </summary>
        </member>
        <member name="M:NFluent.TypeCheckExtensions.HasAttribute``1(NFluent.ICheck{System.Type})">
            <summary>
            Checks if a given type has an attribute of a given type.
            </summary>
            <typeparam name="T">Expected attribute type.</typeparam>
            <param name="check">Check component.</param>
            <returns>A check to link checks.</returns>
        </member>
        <member name="T:NFluent.ICheckForExtensibility`2">
            <summary>
            Fluent check which exposes more information for extensibility purpose.
            </summary>
            <typeparam name="T">
            Type of the value to assert on.
            </typeparam>
            <typeparam name="TC">Interface for the type.
            </typeparam>
        </member>
        <member name="T:NFluent.EnumerableExtensions">
            <summary>
                Extension methods for adding new fluent methods to enumerable.
            </summary>
        </member>
        <member name="M:NFluent.EnumerableExtensions.Count(System.Collections.IEnumerable)">
            <summary>
                Returns the number of items present within the specified enumerable (returns 0 if the enumerable is null).
            </summary>
            <param name="enumerable">The enumerable.</param>
            <returns>The number of items present within the specified enumerable (returns 0 if the enumerable is null).</returns>
        </member>
        <member name="M:NFluent.EnumerableExtensions.ToEnumeratedString(System.Collections.IEnumerable)">
            <summary>
                Return a string containing all the <see cref="T:System.Collections.IEnumerable" /> elements, separated by a comma.
            </summary>
            <param name="enumerable">The enumerable to transform into a string.</param>
            <returns>
                A string containing all the <see cref="T:System.Collections.IEnumerable" /> elements, separated by a comma.
            </returns>
        </member>
        <member name="M:NFluent.EnumerableExtensions.ToEnumeratedString(System.Collections.IEnumerable,System.Int64@,System.String)">
            <summary>
                Return a string containing all the elements of an <see cref="T:System.Collections.IEnumerable" />, separated by a given separator.
            </summary>
            <param name="enumerable">The enumerable to transform into a string.</param>
            <param name="itemsCount">The number of items within the <see cref="T:System.Collections.IEnumerable" />.</param>
            <param name="separator">The separator.</param>
            <returns>
                A string containing all the <see cref="T:System.Collections.IEnumerable" /> elements, separated by a separator.
            </returns>
        </member>
        <member name="M:NFluent.EnumerableExtensions.ToEnumeratedString(System.Collections.IEnumerable,System.Int64@)">
            <summary>
                Return a string containing all the elements of an <see cref="T:System.Collections.IEnumerable" />, separated by a comma.
            </summary>
            <param name="enumerable">The enumerable to transform into a string.</param>
            <param name="itemsCount">The number of items within the <see cref="T:System.Collections.IEnumerable" />.</param>
            <returns>
                A string containing all the <see cref="T:System.Collections.IEnumerable" /> elements, separated by a comma.
            </returns>
        </member>
        <member name="M:NFluent.EnumerableExtensions.ToEnumeratedString(System.Collections.IEnumerable,System.String)">
            <summary>
                Return a string containing all the elements of an <see cref="T:System.Collections.IEnumerable" />, separated by a given separator.
            </summary>
            <param name="enumerable">The enumerable to transform into a string.</param>
            <param name="separator">The separator.</param>
            <returns>A string containing all the <see cref="T:System.Collections.IEnumerable" /> elements, separated by the given separator.</returns>
            A string containing all the
            <see cref="T:System.Collections.IEnumerable" />
            elements, separated by the given separator.
        </member>
        <member name="T:NFluent.Extensions.ExtensionsCommonHelpers">
            <summary>
            Common helper methods for the NFluent extension methods.
            </summary>
        </member>
        <member name="M:NFluent.Extensions.ExtensionsCommonHelpers.IsNumerical(System.Type)">
            <summary>
            Checks if a type is numerical (i.e: int, double, short, uint...).
            </summary>
            <param name="type">Type to evaluate.</param>
            <returns>true if the type is a numerical type.</returns>
        </member>
        <member name="M:NFluent.Extensions.ExtensionsCommonHelpers.ToStringProperlyFormatted(System.Object)">
            <summary>
            Returns a string that represents the current object. If the object is already a string, this method will surround it with brackets.
            </summary>
            <param name="theObject">The theObject.</param>
            <returns>A string that represents the current object. If the object is already a string, this method will surround it with brackets.</returns>
        </member>
        <member name="M:NFluent.Extensions.ExtensionsCommonHelpers.TypeToStringProperlyFormatted(System.Type,System.Boolean)">
            <summary>
            Returns a string with the type name, as seen in source code.
            </summary>
            <param name="type">
            The type to get the name of.
            </param>
            <param name="shortName">
            If set to <c>true</c> return the name without namespaces.
            </param>
            <returns>
            A string containing the type name.
            </returns>
        </member>
        <member name="M:NFluent.Extensions.ExtensionsCommonHelpers.ToStringProperlyFormatted(System.DateTime)">
            <summary>
            Returns a string that represents the current DateTime.         
            </summary>
            <param name="theDateTime">The DateTime.</param>
            <returns>A string that represents the current object with current culture ignore.</returns>
        </member>
        <member name="M:NFluent.Extensions.ExtensionsCommonHelpers.ToStringProperlyFormatted(System.Boolean)">
            <summary>
            Returns a string that represents the current Boolean.         
            </summary>
            <param name="theBoolean">The Boolean.</param>
            <returns>A string that represents the current object with current culture ignore.</returns>
        </member>
        <member name="M:NFluent.Extensions.ExtensionsCommonHelpers.ToStringProperlyFormatted(System.Double)">
            <summary>
            Returns a string that represents the current double.         
            </summary>
            <param name="value">The value.</param>
            <returns>A string that represents the current object with current culture ignore.</returns>
        </member>
        <member name="M:NFluent.Extensions.ExtensionsCommonHelpers.ToStringProperlyFormatted(System.Single)">
            <summary>
            Returns a string that represents the current float.         
            </summary>
            <param name="value">The value.</param>
            <returns>A string that represents the current object with current culture ignore.</returns>
        </member>
        <member name="M:NFluent.Extensions.ExtensionsCommonHelpers.IsNullable(System.Type)">
            <summary>
            Determines whether the specified type is nullable.
            </summary>
            <param name="type">
            The type to be evaluated.
            </param>
            <returns>
            <c>true</c> if the specified type is nullable; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:NFluent.Extensions.ExtensionsCommonHelpers.ImplementsEquals(System.Type)">
            <summary>
            Determines whether the specified type implements Equals.
            </summary>
            <param name="type">The type to be analyzed.</param>
            <returns><c>true</c> is the specified type implements Equals.</returns>
        </member>
        <member name="M:NFluent.Extensions.ExtensionsCommonHelpers.GetBaseType(System.Type)">
            <summary>
            Gets the base type of the given type.
            </summary>
            <param name="type">Type to be analyzed.</param>
            <returns>The Base Type.</returns>
            <remarks>Simplify port to .Net Core.</remarks>
        </member>
        <member name="M:NFluent.Extensions.ExtensionsCommonHelpers.IsPrimitive(System.Type)">
            <summary>
            Checks if a type is a primitive one.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:NFluent.Extensions.ExtensionsCommonHelpers.IsClass(System.Type)">
            <summary>
            Checks if a type is class
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:NFluent.Extensions.ExtensionsCommonHelpers.DoubleCurlyBraces(System.String)">
            <summary>
            Doubles the curly braces in the string.
            </summary>
            <returns>The string having curly braces doubled.</returns>
            <param name="value">String to correct.</param>
        </member>
        <member name="M:NFluent.Extensions.ObjectExtensions.GetTypeWithoutThrowingException``1(``0)">
            <summary>
            Gets the type of the specified reference, or null if it is null.
            </summary>
            <param name="reference">The reference we interested in retrieving the type (may be null).</param>
            <returns>
            The type of the specified reference, or null if the reference is null.
            </returns>
        </member>
        <member name="M:NFluent.Extensions.ObjectExtensions.GetTypeInfo(System.Type)">
            <summary>
            Stub implementation for GetTypeInfo() for Net Framework.
            </summary>
            <param name="type">Type to dig into.</param>
            <returns>An instance allowing to use reflection.</returns>
        </member>
        <member name="T:NFluent.Extensions.StringExtensions">
            <summary>
                Hosts all string related extensions used by NFluent
            </summary>
        </member>
        <member name="M:NFluent.Extensions.StringExtensions.Escaped(System.String)">
            <summary>
                Generates an espaced copy of a chain for use in format (e.G. { replaced by {{).
            </summary>
            <param name="toEscape">String to be escaped</param>
            <returns>Escaped version of the string.</returns>
        </member>
        <member name="M:NFluent.Extensions.StringExtensions.CompareCharIgnoringCase(System.Char,System.Char)">
            <summary>
            Compare char in a case sensitive or insensitive way.
            </summary>
            <param name="carA">first char</param>
            <param name="carB">second char</param>
            <returns>true if chars are the same.</returns>
        </member>
        <member name="M:NFluent.Extensions.StringExtensions.Extract(System.String,System.Int32,System.Int32)">
            <summary>
            Extracts a sub string based on a middle position and a length.
            If truncation was needeed, three dots are added were appropriate.
            </summary>
            <param name="texte">Texte to extract from</param>
            <param name="middle">Middle position</param>
            <param name="len">Length of the extract</param>
            <returns>the desired substring.</returns>
        </member>
        <member name="M:NFluent.Extensions.StringExtensions.SplitAsLines(System.String)">
            <summary>
            Transform a string to an <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>
            <param name="checkedString"></param>
            <returns></returns>
        </member>
        <member name="T:NFluent.MessageRelatedExtensions">
            <summary>
            Static classes hosting all error messages related extensions.
            </summary>
        </member>
        <member name="M:NFluent.MessageRelatedExtensions.As``1(NFluent.ICheck{``0},System.String)">
            <summary>
            Define a specific name for the system under test.
            </summary>
            <typeparam name="T">Tested type.
            </typeparam>
            <param name="check">Checker hosting the check context.
            </param>
            <param name="sutLabel">Name to use.
            </param>
            <returns>
            The <see cref="T:NFluent.ICheck`1"/>Checker object.
            </returns>
        </member>
        <member name="T:NFluent.ICheckPlusAnd">
            <inheritdoc />
            <summary>
            Allows to select multiple scope using 'And' keyword
            </summary>
        </member>
        <member name="P:NFluent.ICheckPlusAnd.And">
            <summary>
            Link to add another scope
            </summary>
        </member>
        <member name="P:NFluent.ICheckPlusAnd.IgnoreExtra">
            <summary>
            Exclude fields that are not present in sut.
            </summary>
        </member>
        <member name="M:NFluent.ICheckPlusAnd.Excluding(System.String[])">
            <summary>
            Lists excluded fields
            </summary>
            <param name="field">field names to be excluded</param>
            <returns>Linking object to.</returns>
        </member>
        <member name="T:NFluent.ICheckWithConsidering">
            <summary>
            Scope options for reflection based checks.
            </summary>
        </member>
        <member name="T:NFluent.IFieldsOrProperties">
            <summary>
                Steps in fluent API for frelection based checks.
            </summary>
        </member>
        <member name="P:NFluent.IFieldsOrProperties.Fields">
            <summary>
            Scope on fields
            </summary>
        </member>
        <member name="P:NFluent.IFieldsOrProperties.Properties">
            <summary>
            Scope on properties
            </summary>
        </member>
        <member name="T:NFluent.IMembersSelection">
            <inheritdoc cref="T:NFluent.IFieldsOrProperties"/>
            <inheritdoc cref="T:NFluent.IPublicOrNot"/>
        </member>
        <member name="T:NFluent.IPublicOrNot">
            <summary>
                Allow to precise public or non public as a scope
            </summary>
        </member>
        <member name="P:NFluent.IPublicOrNot.Public">
            <summary>
                Allow to scope to public.
            </summary>
        </member>
        <member name="P:NFluent.IPublicOrNot.NonPublic">
            <summary>
                Allow to scope to non public member (private, protected, internal)
            </summary>
        </member>
        <member name="P:NFluent.IPublicOrNot.All">
            <summary>
                Allow all members
            </summary>
        </member>
        <member name="T:NFluent.ExtractingExtensions">
            <summary>
            Extension methods for exploiting enumerable content in a fluent manner (i.e. with auto completion support and in an english readable way).
            </summary>
        </member>
        <member name="M:NFluent.ExtractingExtensions.Extracting``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Extract all the values of a given property given its name, from an enumerable collection of objects holding that property.
            </summary>
            <typeparam name="T">Type of the objects belonging to the initial enumerable collection.</typeparam>
            <param name="enumerable">The enumerable collection of objects.</param>
            <param name="propertyName">Name of the property to extract value from for every object of the collection.</param>
            <returns>
            An enumerable of all the property values for every <typeparamref name="T"/> objects in the <paramref name="enumerable"/>.
            </returns>
            <exception cref="T:System.InvalidOperationException">The object of type <typeparamref name="T"/> don't have a property with the given property name.</exception>
        </member>
        <member name="M:NFluent.ExtractingExtensions.Properties``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Extract all the values of a given property given its name, from an enumerable collection of objects holding that property.
            </summary>
            <typeparam name="T">Type of the objects belonging to the initial enumerable collection.</typeparam>
            <param name="enumerable">The enumerable collection of objects.</param>
            <param name="propertyName">Name of the property to extract value from for every object of the collection.</param>
            <returns>
            An enumerable of all the property values for every <typeparamref name="T"/> objects in the <paramref name="enumerable"/>.
            </returns>
            <exception cref="T:System.InvalidOperationException">The object of type <typeparamref name="T"/> don't have a property with the given property name.</exception>
        </member>
        <member name="M:NFluent.ExtractingExtensions.Extracting``1(``0[],System.String)">
            <summary>
            Extract all the values of a given property given its name, from an array of objects holding that property.
            </summary>
            <typeparam name="T">Type of the objects belonging to the array.</typeparam>
            <param name="array">The array of <typeparamref name="T"/>.</param>
            <param name="propertyName">Name of the property to extract value from for every object of the array.</param>
            <returns>
            An enumerable of all the property values for every <typeparamref name="T"/> objects in the <see cref="T:System.Array"/>.
            </returns>
        </member>
        <member name="M:NFluent.ExtractingExtensions.Properties``1(``0[],System.String)">
            <summary>
            Extract all the values of a given property given its name, from an array of objects holding that property.
            </summary>
            <typeparam name="T">Type of the objects belonging to the array.</typeparam>
            <param name="array">The array of <typeparamref name="T"/>.</param>
            <param name="propertyName">Name of the property to extract value from for every object of the array.</param>
            <returns>
            An enumerable of all the property values for every <typeparamref name="T"/> objects in the <see cref="T:System.Array"/>.
            </returns>
        </member>
        <member name="M:NFluent.ExtractingExtensions.Extracting``2(System.Collections.Generic.IEnumerable{``0},NFluent.Func{``0,``1})">
            <summary>
            Extract all the values of a given property given its getter lambda, from an enumerable collection of objects holding that property.
            </summary>
            <param name="enumerable">The enumerable collection of objects.</param>
            <param name="getter">Lambda to extract value of the property from for every object of the collection.</param>
            <typeparam name="T">Type of the objects belonging to the initial enumerable collection.</typeparam>
            <typeparam name="TP">Type of the extracted values.</typeparam>
            <returns>
            An enumerable of all the property values typed <typeparamref name="TP"/> for every <typeparamref name="T"/> objects in the <paramref name="enumerable"/>.
            </returns>
        </member>
        <member name="M:NFluent.ExtractingExtensions.Extracting``2(``0[],NFluent.Func{``0,``1})">
            <summary>
            Extract all the values of a given property given its getter lambda, from an enumerable collection of objects holding that property.
            </summary>
            <param name="array">The array of <typeparamref name="T"/>.</param>
            <param name="getter">Lambda to extract value of the property from for every object of the collection.</param>
            <typeparam name="T">Type of the objects belonging to the initial enumerable collection.</typeparam>
            <typeparam name="TP">Type of the extracted values.</typeparam>
            <returns>
            An enumerable of all the property values typed <typeparamref name="TP"/> for every <typeparamref name="T"/> objects in the <see cref="T:System.Array"/>.
            </returns>
        </member>
        <member name="T:NFluent.FluentCheckException">
            <summary>
            Thrown when an check failed.
            </summary>
        </member>
        <member name="M:NFluent.FluentCheckException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NFluent.FluentCheckException" /> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="T:NFluent.EqualityMode">
            <summary>
            
            </summary>
        </member>
        <member name="F:NFluent.EqualityMode.FluentEquals">
            <summary>
            Compare objects using Equals methods, except for arrays for which comparison is made per entry.
            </summary>
            <remarks>Default mode</remarks>
        </member>
        <member name="F:NFluent.EqualityMode.Equals">
            <summary>
            Compare objects using Equals methods.
            </summary>
        </member>
        <member name="F:NFluent.EqualityMode.OperatorEq">
            <summary>
            Compare objects using operator==
            </summary>
        </member>
        <member name="F:NFluent.EqualityMode.OperatorNeq">
            <summary>
            Compare objects using operator!=
            </summary>
        </member>
        <member name="T:NFluent.Action">
            <summary>
            Delegate that does not return a value and takes no parameter.
            </summary>
        </member>
        <member name="T:NFluent.Action`1">
            <summary>
            Delegates that takes and parameter and does not return anything.
            </summary>
            <typeparam name="TU">Type of parameter.</typeparam>
            <param name="param">value of the parameter</param>
        </member>
        <member name="T:NFluent.Action`2">
            <summary>
            Delegates that takes and parameter and does not return anything.
            </summary>
            <typeparam name="TU">Type of first parameter.</typeparam>
            <typeparam name="TV">Type of second parameter.</typeparam>
            <param name="param">value of the parameter</param>
            <param name="param2">value of the second parameter</param>
        </member>
        <member name="T:NFluent.Func`1">
            <summary>
            Delegates that has a return value.
            </summary>
            <typeparam name="T">Type of return value.</typeparam>
            <returns>Return value.</returns>
        </member>
        <member name="T:NFluent.Func`2">
            <summary>
            Delegates that has a return value and takes one parameter.
            </summary>
            <typeparam name="T">Type of return value.</typeparam>
            <typeparam name="TU">Type of parameter.</typeparam>
            <param name="param">value of the parameter</param>
            <returns>Return value.</returns>
        </member>
        <member name="T:NFluent.Func`3">
            <summary>
            Delegates that has a return value and takes two parameters.
            </summary>
            <typeparam name="T">Type of return value.</typeparam>
            <typeparam name="TU">Type of first parameter.</typeparam>
            <typeparam name="T1">Type of second parameter.</typeparam>
            <param name="param">value of the first parameter</param>
            <param name="param2">value of the second parameter</param>
            <returns>Return value.</returns>
        </member>
        <member name="T:NFluent.Func`4">
            <summary>
            Delegates that has a return value and takes three parameter.
            </summary>
            <typeparam name="T">Type of return value.</typeparam>
            <typeparam name="TU">Type of first parameter.</typeparam>
            <typeparam name="T1">Type of second parameter.</typeparam>
            <typeparam name="T2">Type of second parameter.</typeparam>
            <param name="param">value of the first parameter</param>
            <param name="param2">value of the second parameter</param>
            <param name="param3">value of the second parameter</param>
            <returns>Return value.</returns>
        </member>
        <member name="T:NFluent.Predicate`1">
            <summary>
            Delegates that is used as a filter. Returns true or false.
            </summary>
            <typeparam name="T">Type of parameter.</typeparam>
            <param name="item">Parameter value.</param>
            <returns>true if <see paramref="item"/> matches the rule.</returns>
        </member>
        <member name="T:NFluent.PolyFill">
            <summary>
            Contains various extensions method to provide poly fills on various net framework versions
            </summary>
        </member>
        <member name="T:NFluent.ICheck`1">
            <summary>
            Provides check methods to be executed on a given value.
            </summary>
            <typeparam name="T">Type of the value to assert on.</typeparam>
        </member>
        <member name="M:NFluent.ICheck`1.Equals(System.Object)">
            <summary>
            Checks whether the specified <see cref="T:System.Object" /> is equal to this instance or not.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; throws a <see cref="T:NFluent.FluentCheckException"/> otherwise.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The specified <see cref="T:System.Object"/> is not equal to this instance.</exception>
        </member>
        <member name="M:NFluent.ICheck`1.IsInstanceOf``1">
            <summary>
            Checks whether if the checked value is of the given type.
            </summary>
            <typeparam name="TU">The given type to check the checked value against.</typeparam>
            <returns>A chainable check.</returns>
            <exception cref="T:NFluent.FluentCheckException">The specified value is null (and not of the same nullable type) or not of the given type.</exception>
        </member>
        <member name="M:NFluent.ICheck`1.IsNotInstanceOf``1">
            <summary>
            Checks whether if the checked value is different from the given type.
            </summary>
            <typeparam name="TU">The given type to check the checked value against.</typeparam>
            <returns>A chainable check.</returns>
            <exception cref="T:NFluent.FluentCheckException">The specified value is of the given type.</exception>
        </member>
        <member name="T:NFluent.ICheckLink`1">
            <summary>
            Provides a way to chain two <see cref="T:NFluent.ICheck`1"/> instances. 
            </summary>
            <typeparam name="T">Type of the <see cref="T:NFluent.ICheck`1"/> to be chained.</typeparam>
        </member>
        <member name="P:NFluent.ICheckLink`1.And">
            <summary>
            Chains a new fluent check to the current one.
            </summary>
            <value>
            The new fluent check instance which has been chained to the previous one.
            </value>
        </member>
        <member name="T:NFluent.ICheckLinkWhich`2">
            <summary>
                Offer chaining for checks as well as zooming on a sub check.
            </summary>
            <typeparam name="TMain">Main checker.</typeparam>
            <typeparam name="TSub">Alternative checker.</typeparam>
        </member>
        <member name="P:NFluent.ICheckLinkWhich`2.Which">
            <summary>
                Checks item identifier in previous check.
            </summary>
            <value>A checker for the item.</value>
        </member>
        <member name="T:NFluent.ICodeCheck`1">
            <summary>
            Used as a marker for code related checks.
            </summary>
            <typeparam name="T">Code description type. Must inherit from RunTrace.</typeparam>
        </member>
        <member name="T:NFluent.IExtendableCheckLink`2">
            <summary>
            Provides an specific implementation for IEnumerable fluent check extension. Required to implement IEnumerable fluent API syntax.
            </summary>
            <typeparam name="T">Type managed by this extension.</typeparam>
            <typeparam name="TU">Type of the reference comparand.</typeparam>
        </member>
        <member name="P:NFluent.IExtendableCheckLink`2.OriginalComparand">
            <summary>
            Gets the initial list that was used in Contains.
            </summary>
            <value>
            Initial list that was used in Contains.
            </value>
        </member>
        <member name="T:NFluent.IHasParentCheck`1">
            <summary>
            A contract to force the type of the expected parent.
            </summary>
            <typeparam name="TParent">The type of the parent.</typeparam>
        </member>
        <member name="T:NFluent.ILambdaExceptionCheck`1">
            <summary>
            Provides check methods to be executed on the exception raised by a given lambda/action.
            </summary>
            <typeparam name="TException">The type of the exception.</typeparam>
        </member>
        <member name="P:NFluent.ILambdaExceptionCheck`1.Value">
            <summary>
            Gets or sets with the parent class that fluently called this one.
            </summary>
            <actualValue>
            The actualValue.
            </actualValue>
        </member>
        <member name="M:NFluent.ILambdaExceptionCheck`1.DueTo``1">
            <summary>
            Checks if the exception wwas due to an (inner) exception of a specified type.
            </summary>
            <typeparam name="TE">Expected inner exception type</typeparam>
            <returns>A chainable link</returns>
        </member>
        <member name="T:NFluent.IMustImplementIForkableCheckWithoutDisplayingItsMethodsWithinIntelliSense">
            <summary>
            Marker interface indicating that the implementations should implement the <see cref="T:NFluent.Kernel.IForkableCheck"/> interface.
            This is a 'trick' so that the <see cref="T:NFluent.Kernel.IForkableCheck"/> methods don't appeared in the user Intellisense.
            </summary>
        </member>
        <member name="T:NFluent.INegateableCheck`1">
            <summary>
            Fluent check that has the ability to be negated via a 'Not' operator.
            </summary>
            <typeparam name="T">Fluent check type to be negated.</typeparam>
        </member>
        <member name="P:NFluent.INegateableCheck`1.Not">
            <summary>
            OnNegate the next check, and the next check only.
            </summary>
            <value>
            The next check negated.
            </value>
        </member>
        <member name="T:NFluent.INegated">
            <summary>
            Indicates whether the fluent check is negated or not.
            </summary>
        </member>
        <member name="P:NFluent.INegated.Negated">
            <summary>
            Gets a value indicating whether this <see cref="T:NFluent.ICheck`1" /> should be negated or not.
            This property is useful when you implement check methods. 
            </summary>
            <value>
              <c>true</c> if all the methods applying to this check instance should be negated; <c>false</c> otherwise.
            </value>
        </member>
        <member name="T:NFluent.INullableOrNumberCheckLink`1">
            <summary>
            Provides a way to chain two <see cref="T:NFluent.ICheck`1"/> instances or to chain.
            </summary>
            <typeparam name="TN">Number type of the checked nullable.</typeparam>
        </member>
        <member name="P:NFluent.INullableOrNumberCheckLink`1.And">
            <summary>
            Chains a new fluent check on the current one for the nullable value.
            </summary>
            <value>
            The new fluent check instance dedicated to the nullable, which has been chained to the previous one.
            </value>
        </member>
        <member name="P:NFluent.INullableOrNumberCheckLink`1.Which">
            <summary>
            Chains a new <see cref="T:NFluent.ICheck`1"/> instance to the current check.
            </summary>
            <value>
            The new fluent check instance dedicated to the nullable Value, which has been chained to the previous one.
            </value>
        </member>
        <member name="T:NFluent.IStructCheck`1">
            <summary>
            Provides check methods to be executed on a given value of type struct.
            </summary>
            <typeparam name="T">Type of the struct value to assert on.</typeparam>
        </member>
        <member name="M:NFluent.IStructCheck`1.Equals(System.Object)">
            <summary>
            Checks whether the specified <see cref="T:System.Object" /> is equal to this instance or not.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; throws a <see cref="T:NFluent.FluentCheckException"/> otherwise.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The specified <see cref="T:System.Object"/> is not equal to this instance.</exception>
        </member>
        <member name="M:NFluent.IStructCheck`1.IsInstanceOf``1">
            <summary>
            Checks whether if the checked value is of the given type.
            </summary>
            <typeparam name="TU">The given type to check the checked value against.</typeparam>
            <returns>A chainable check.</returns>
            <exception cref="T:NFluent.FluentCheckException">The specified value is not of the given type.</exception>
        </member>
        <member name="M:NFluent.IStructCheck`1.IsNotInstanceOf``1">
            <summary>
            Checks whether if the checked value is different from the given type.
            </summary>
            <typeparam name="TU">The given type to check the checked value against.</typeparam>
            <returns>A chainable check.</returns>
            <exception cref="T:NFluent.FluentCheckException">The specified value is of the given type.</exception>
        </member>
        <member name="T:NFluent.IWithValue`1">
            <summary>
            Exposes a value.
            </summary>
            <typeparam name="T">
            Type of the exposed value.
            </typeparam>
        </member>
        <member name="P:NFluent.IWithValue`1.Value">
            <summary>
            Gets the value to be tested (provided for any extension method to be able to test it).
            </summary>
            <value>
            The value to be tested by any fluent check extension method.
            </value>
        </member>
        <member name="T:NFluent.Messages.EntityNamer">
            <summary>
            Is responsible to provide adequate naming for values in NFluent. Rule is:
            1 specified name
            2 type dependant name (for known types)
            3 'value'
            This provides a consistent algorithm for all messages.
            </summary>
        </member>
        <member name="T:NFluent.Messages.EnumerationBlock">
            <summary>
            Class describing a value block.
            </summary>
        </member>
        <member name="F:NFluent.Messages.EnumerationBlock.test">
            <summary>
            The tested object.
            </summary>
        </member>
        <member name="F:NFluent.Messages.EnumerationBlock.enumerableCount">
            <summary>
            The enumerable count.
            </summary>
        </member>
        <member name="F:NFluent.Messages.EnumerationBlock.fullTypeName">
            <summary>
            The full type name.
            </summary>
        </member>
        <member name="F:NFluent.Messages.EnumerationBlock.includeHash">
            <summary>
            The include hash.
            </summary>
        </member>
        <member name="F:NFluent.Messages.EnumerationBlock.includeType">
            <summary>
            The include type.
            </summary>
        </member>
        <member name="F:NFluent.Messages.EnumerationBlock.type">
            <summary>
            The instance type.
            </summary>
        </member>
        <member name="M:NFluent.Messages.EnumerationBlock.#ctor(System.Collections.IEnumerable,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:NFluent.Messages.EnumerationBlock" /> class.
            </summary>
            <param name="test">The tested object.</param>
            <param name="referenceIndex">Index of the reference value.</param>
        </member>
        <member name="M:NFluent.Messages.EnumerationBlock.GetMessage">
            <summary>
            Gets the message as a string.
            </summary>
            <returns>
            A string with the properly formatted message.
            </returns>
        </member>
        <member name="M:NFluent.Messages.EnumerationBlock.WithEnumerableCount(System.Int64)">
            <summary>
            Adds a description of the number of items (only relevant if the object is an enumerable).
            </summary>
            <param name="itemsCount">
            The number of items of the enumerable instance.
            </param>
        </member>
        <member name="M:NFluent.Messages.EnumerationBlock.WithHashCode(System.Boolean)">
            <summary>
            Requests that the Hash value is included in the description block.
            </summary>
            <param name="active">
            True to include the type. This is the default value.
            </param>
        </member>
        <member name="M:NFluent.Messages.EnumerationBlock.WithType(System.Boolean,System.Boolean)">
            <summary>
            Requests that the type is included in the description block.
            </summary>
            <param name="active">
            True to include the type. This is the default value.
            </param>
            <param name="full">
            True to display the full type name (with assembly).
            </param>
        </member>
        <member name="M:NFluent.Messages.EnumerationBlock.WithType(System.Type)">
            <summary>
            Requests that a specific type is included in the description block.
            </summary>
            <param name="forcedType">
            Type to include in the description.
            </param>
            <remarks>
            Default type is the type of the object instance given in constructor.
            </remarks>
        </member>
        <member name="M:NFluent.Messages.EnumerationBlock.Description">
            <summary>
            The description.
            </summary>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="P:NFluent.Messages.GenericLabelBlock.EntityLogic">
            <summary>
            Gets or sets the entity logic.
            </summary>
            <value>
            The entity logic.
            </value>
        </member>
        <member name="M:NFluent.Messages.GenericLabelBlock.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>
            A string that represents the current object.
            </returns>
        </member>
        <member name="M:NFluent.Messages.GenericLabelBlock.CustomMessage(System.String)">
            <summary>
            Customs the message.
            </summary>
            <param name="message">The message.</param>
            <returns>
            A custom formatted message.
            </returns>
        </member>
        <member name="T:NFluent.Messages.InstanceBlock">
            <summary>
            Class describing block for any instance of a given type.
            </summary>
        </member>
        <member name="F:NFluent.Messages.InstanceBlock.type">
            <summary>
            The instance type.
            </summary>
        </member>
        <member name="F:NFluent.Messages.InstanceBlock.fullTypeName">
            <summary>
            The full type name.
            </summary>
        </member>
        <member name="M:NFluent.Messages.InstanceBlock.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:NFluent.Messages.InstanceBlock"/> class.
            </summary>
            <param name="type">
            The tested type.
            </param>
        </member>
        <member name="M:NFluent.Messages.InstanceBlock.GetMessage">
            <summary>
            Gets the message as a string.
            </summary>
            <returns>
            A string with the properly formatted message.
            </returns>
        </member>
        <member name="M:NFluent.Messages.InstanceBlock.WithEnumerableCount(System.Int64)">
            <summary>
            Adds a description of the number of items (only relevant if the object is an enumerable).
            </summary>
            <param name="itemsCount">
            The number of items of the enumerable instance.
            </param>
        </member>
        <member name="M:NFluent.Messages.InstanceBlock.WithHashCode(System.Boolean)">
            <summary>
            Requests that the Hash value is included in the description block.
            </summary>
            <param name="active">
            True to include the type. This is the default value.
            </param>
        </member>
        <member name="M:NFluent.Messages.InstanceBlock.WithType(System.Boolean,System.Boolean)">
            <summary>
            Requests that the type is included in the description block.
            </summary>
            <param name="active">
            True to include the type. This is the default value.
            </param>
            <param name="full">
            True to display the full type name (with assembly).
            </param>
        </member>
        <member name="M:NFluent.Messages.InstanceBlock.WithType(System.Type)">
            <summary>
            Requests that a specific type is included in the description block.
            </summary>
            <param name="forcedType">
            Type to include in the description.
            </param>
            <remarks>
            Default type is the type of the object instance given in constructor.
            </remarks>
        </member>
        <member name="T:NFluent.Messages.IValueDescription">
            <summary>
            Interface for a value description class.
            </summary>
        </member>
        <member name="M:NFluent.Messages.IValueDescription.GetMessage">
            <summary>
            Gets the message as a string.
            </summary>
            <returns>
            A string with the properly formatted message.
            </returns>
        </member>
        <member name="M:NFluent.Messages.IValueDescription.WithEnumerableCount(System.Int64)">
            <summary>
            Adds a description of the number of items (only relevant if the object is an enumerable).
            </summary>
            <param name="itemsCount">
            The number of items of the enumerable instance.
            </param>
        </member>
        <member name="M:NFluent.Messages.IValueDescription.WithHashCode(System.Boolean)">
            <summary>
            Requests that the Hash value is included in the description block.
            </summary>
            <param name="active">
            True to include the type. This is the default value.
            </param>
        </member>
        <member name="M:NFluent.Messages.IValueDescription.WithType(System.Boolean,System.Boolean)">
            <summary>
            Requests that the type is included in the description block.
            </summary>
            <param name="active">
            True to include the type. This is the default value.
            </param>
            <param name="full">
            True to display the full type name (with assembly).
            </param>
        </member>
        <member name="M:NFluent.Messages.IValueDescription.WithType(System.Type)">
            <summary>
            Requests that a specific type is included in the description block.
            </summary>
            <param name="forcedType">
            Type to include in the description.
            </param>
            <remarks>
            Default type is the type of the object instance given in constructor.
            </remarks>
        </member>
        <member name="T:NFluent.Messages.RangeBlock">
            <summary>
            Class representing a range of value
            </summary>
        </member>
        <member name="M:NFluent.Messages.RangeBlock.#ctor(System.Double,System.Double)">
            <summary>
            Constructor
            </summary>
            <param name="referenceValue">Reference value (mid point)</param>
            <param name="tolerance">Tolerance</param>
            <remarks>This represents a range of <see cref="F:NFluent.Messages.RangeBlock.referenceValue"/> +/- <see cref="F:NFluent.Messages.RangeBlock.tolerance"/></remarks>
        </member>
        <member name="T:NFluent.Messages.ValueBlock">
            <summary>
            Class describing a value block.
            </summary>
        </member>
        <member name="M:NFluent.Messages.ValueBlock.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:NFluent.Messages.ValueBlock"/> class.
            </summary>
            <param name="test">
            The tested object.
            </param>
        </member>
        <member name="M:NFluent.Messages.ValueBlock.GetMessage">
            <summary>
            Gets the message as a string.
            </summary>
            <returns>
            A string with the properly formatted message.
            </returns>
        </member>
        <member name="M:NFluent.Messages.ValueBlock.WithEnumerableCount(System.Int64)">
            <summary>
            Adds a description of the number of items (only relevant if the object is an enumerable).
            </summary>
            <param name="itemsCount">
            The number of items of the enumerable instance.
            </param>
        </member>
        <member name="M:NFluent.Messages.ValueBlock.WithHashCode(System.Boolean)">
            <summary>
            Requests that the Hash value is included in the description block.
            </summary>
            <param name="active">
            True to include the type. This is the default value.
            </param>
        </member>
        <member name="M:NFluent.Messages.ValueBlock.WithType(System.Boolean,System.Boolean)">
            <summary>
            Requests that the type is included in the description block.
            </summary>
            <param name="active">
            True to include the type. This is the default value.
            </param>
            <param name="full">
            True to display the full type name (with assembly).
            </param>
        </member>
        <member name="M:NFluent.Messages.ValueBlock.WithType(System.Type)">
            <summary>
            Requests that a specific type is included in the description block.
            </summary>
            <param name="forcedType">
            Type to include in the description.
            </param>
            <remarks>
            Default type is the type of the object instance given in constructor.
            </remarks>
        </member>
        <member name="M:NFluent.Messages.ValueBlock.Description">
            <summary>
            The description.
            </summary>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="T:NFluent.ILambdaCheck">
            <summary>
            Provides lambda/action specific check.
            </summary>
        </member>
        <member name="M:NFluent.ILambdaCheck.LastsLessThan(System.Double,NFluent.TimeUnit)">
            <summary>
            Checks that the execution time is below a specified threshold.
            </summary>
            <param name="threshold">The threshold.</param>
            <param name="timeUnit">The time unit of the given threshold.</param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">Execution was strictly above limit.</exception>
        </member>
        <member name="M:NFluent.ILambdaCheck.DoesNotThrow">
            <summary>
            Check that the code does not throw an exception.
            </summary>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The code raised an exception.</exception>
        </member>
        <member name="M:NFluent.ILambdaCheck.Throws``1">
            <summary>
            Checks that the code did throw an exception of a specified type.
            </summary>
            <typeparam name="T">And.Expected exception type.</typeparam>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The code did not raised an exception of the specified type, or did not raised an exception at all.</exception>
        </member>
        <member name="M:NFluent.ILambdaCheck.ThrowsAny">
            <summary>
            Checks that the code did throw an exception of any type.
            </summary>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The code did not raised an exception of any type.</exception>
        </member>
        <member name="T:NFluent.RunTrace">
            <summary>
            This class stores trace information for a code evaluation.
            </summary>
        </member>
        <member name="P:NFluent.RunTrace.ExecutionTime">
            <summary>
            Gets or sets the execution time of the checked code.
            </summary>
            <value>
            The execution time.
            </value>
        </member>
        <member name="P:NFluent.RunTrace.RaisedException">
            <summary>
            Gets or sets the raised exception.
            </summary>
            <value>
            The raised exception.
            </value>
        </member>
        <member name="P:NFluent.RunTrace.TotalProcessorTime">
            <summary>
            Gets or sets the total processor time.
            </summary>
            <value>
            The total processor time.
            </value>
        </member>
        <member name="T:NFluent.RunTraceResult`1">
            <summary>
            This code stores trace information for a code evaluation and its returned value.
            </summary>
            <typeparam name="T">Code return type.</typeparam>
        </member>
        <member name="P:NFluent.RunTraceResult`1.Result">
            <summary>
            Gets or sets the result of the evaluated code.
            </summary>
            <value>
            The result.
            </value>
        </member>
        <member name="T:NFluent.TimeUnit">
            <summary>
            Enumerate the available time unit.
            </summary>
        </member>
        <member name="F:NFluent.TimeUnit.Nanoseconds">
            <summary>
            The nanoseconds.
            </summary>
        </member>
        <member name="F:NFluent.TimeUnit.Microseconds">
            <summary>
            The Microseconds.
            </summary>
        </member>
        <member name="F:NFluent.TimeUnit.Milliseconds">
            <summary>
            The Milliseconds.
            </summary>
        </member>
        <member name="F:NFluent.TimeUnit.Seconds">
            <summary>
            The seconds.
            </summary>
        </member>
        <member name="F:NFluent.TimeUnit.Minutes">
            <summary>
            The minutes.
            </summary>
        </member>
        <member name="F:NFluent.TimeUnit.Hours">
            <summary>
            The hours.
            </summary>
        </member>
        <member name="F:NFluent.TimeUnit.Days">
            <summary>
            The days.
            </summary>
        </member>
        <member name="F:NFluent.TimeUnit.Weeks">
            <summary>
            The weeks.
            </summary>
        </member>
        <member name="T:NFluent.ByteCheckExtensions">
            <summary>
            Provides check methods to be executed on an <see cref="T:System.Byte"/> value.
            </summary>
        </member>
        <member name="M:NFluent.ByteCheckExtensions.IsBefore(NFluent.ICheck{System.Byte},System.Byte)">
            <summary>
            Determines whether the specified value is before the other one.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <param name="givenValue">The other value.</param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The current value is not before the other one.</exception>
        </member>
        <member name="M:NFluent.ByteCheckExtensions.IsAfter(NFluent.ICheck{System.Byte},System.Byte)">
            <summary>
            Determines whether the specified value is after the other one.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <param name="givenValue">The other value.</param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The current value is not after the other one.</exception>
        </member>
        <member name="M:NFluent.ByteCheckExtensions.IsZero(NFluent.ICheck{System.Byte})">
            <summary>
            Checks that the actual value is equal to zero.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The value is not equal to zero.</exception>
        </member>
        <member name="M:NFluent.ByteCheckExtensions.HasAValue(NFluent.ICheck{System.Nullable{System.Byte}})">
            <summary>
            Checks that the actual nullable value has a value and thus, is not null.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <returns>A check link.</returns>
            <exception cref="T:NFluent.FluentCheckException">The value is null.</exception>
        </member>
        <member name="M:NFluent.ByteCheckExtensions.HasNoValue(NFluent.ICheck{System.Nullable{System.Byte}})">
            <summary>
            Checks that the actual nullable value has no value and thus, is null. 
            Note: this method does not return A check link since the nullable is null.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <exception cref="T:NFluent.FluentCheckException">The value is not null.</exception>
        </member>
        <member name="M:NFluent.ByteCheckExtensions.IsNotZero(NFluent.ICheck{System.Byte})">
            <summary>
            Checks that the actual value is NOT equal to zero.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <returns>
              <returns>A check link.</returns>
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The value is equal to zero.</exception>
        </member>
        <member name="M:NFluent.ByteCheckExtensions.IsLessThan(NFluent.ICheck{System.Byte},System.Byte)">
            <summary>
            Checks that the actual value is less than an operand.
            </summary>
            <param name="check">
            The fluent check to be extended.
            </param>
            <param name="comparand">
            Comparand to compare the value to.
            </param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">
            The value is not less than the comparand.
            </exception>
        </member>
        <member name="M:NFluent.ByteCheckExtensions.IsStrictlyLessThan(NFluent.ICheck{System.Byte},System.Byte)">
            <summary>
            Checks that the checked value is strictly less than the comparand.
            </summary>
            <param name="check">
            The fluent check to be extended.
            </param>
            <param name="comparand">
            Comparand to compare the value to.
            </param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">
            The value is not strictly less than the comparand.
            </exception>
        </member>
        <member name="M:NFluent.ByteCheckExtensions.IsGreaterThan(NFluent.ICheck{System.Byte},System.Byte)">
            <summary>
            Checks that the actual value is more than an operand.
            </summary>
            <param name="check">
            The fluent check to be extended.
            </param>
            <param name="comparand">
            Comparand to compare the value to.
            </param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">
            The value is not less than the comparand.
            </exception>
        </member>
        <member name="M:NFluent.ByteCheckExtensions.IsStrictlyGreaterThan(NFluent.ICheck{System.Byte},System.Byte)">
            <summary>
            Checks that the checked value is strictly greater than the comparand.
            </summary>
            <param name="check">
            The fluent check to be extended.
            </param>
            <param name="comparand">
            Comparand to compare the value to.
            </param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">
            The checked value is not strictly greater than the comparand.
            </exception>
        </member>
        <member name="M:NFluent.ByteCheckExtensions.IsEqualTo(NFluent.ICheck{System.Byte},System.Byte)">
            <summary>
            Checks that the actual value is equal to another expected value.
            </summary>
            <param name="check">
            The fluent check to be extended.
            </param>
            <param name="expected">
            The expected value.
            </param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">
            The actual value is not equal to the expected value.
            </exception>
        </member>
        <member name="T:NFluent.DecimalCheckExtensions">
            <summary>
            Provides check methods to be executed on an <see cref="T:System.Decimal"/> value.
            </summary>
        </member>
        <member name="M:NFluent.DecimalCheckExtensions.IsBefore(NFluent.ICheck{System.Decimal},System.Decimal)">
            <summary>
            Determines whether the specified value is before the other one.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <param name="givenValue">The other value.</param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The current value is not before the other one.</exception>
        </member>
        <member name="M:NFluent.DecimalCheckExtensions.IsAfter(NFluent.ICheck{System.Decimal},System.Decimal)">
            <summary>
            Determines whether the specified value is after the other one.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <param name="givenValue">The other value.</param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The current value is not after the other one.</exception>
        </member>
        <member name="M:NFluent.DecimalCheckExtensions.IsZero(NFluent.ICheck{System.Decimal})">
            <summary>
            Checks that the actual value is equal to zero.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The value is not equal to zero.</exception>
        </member>
        <member name="M:NFluent.DecimalCheckExtensions.HasAValue(NFluent.ICheck{System.Nullable{System.Decimal}})">
            <summary>
            Checks that the actual nullable value has a value and thus, is not null.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <returns>A check link.</returns>
            <exception cref="T:NFluent.FluentCheckException">The value is null.</exception>
        </member>
        <member name="M:NFluent.DecimalCheckExtensions.HasNoValue(NFluent.ICheck{System.Nullable{System.Decimal}})">
            <summary>
            Checks that the actual nullable value has no value and thus, is null. 
            Note: this method does not return A check link since the nullable is null.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <exception cref="T:NFluent.FluentCheckException">The value is not null.</exception>
        </member>
        <member name="M:NFluent.DecimalCheckExtensions.IsNotZero(NFluent.ICheck{System.Decimal})">
            <summary>
            Checks that the actual value is NOT equal to zero.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <returns>
              <returns>A check link.</returns>
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The value is equal to zero.</exception>
        </member>
        <member name="M:NFluent.DecimalCheckExtensions.IsLessThan(NFluent.ICheck{System.Decimal},System.Decimal)">
            <summary>
            Checks that the actual value is less than an operand.
            </summary>
            <param name="check">
            The fluent check to be extended.
            </param>
            <param name="comparand">
            Comparand to compare the value to.
            </param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">
            The value is not less than the comparand.
            </exception>
        </member>
        <member name="M:NFluent.DecimalCheckExtensions.IsStrictlyLessThan(NFluent.ICheck{System.Decimal},System.Decimal)">
            <summary>
            Checks that the checked value is strictly less than the comparand.
            </summary>
            <param name="check">
            The fluent check to be extended.
            </param>
            <param name="comparand">
            Comparand to compare the value to.
            </param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">
            The value is not strictly less than the comparand.
            </exception>
        </member>
        <member name="M:NFluent.DecimalCheckExtensions.IsGreaterThan(NFluent.ICheck{System.Decimal},System.Decimal)">
            <summary>
            Checks that the actual value is more than an operand.
            </summary>
            <param name="check">
            The fluent check to be extended.
            </param>
            <param name="comparand">
            Comparand to compare the value to.
            </param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">
            The value is not less than the comparand.
            </exception>
        </member>
        <member name="M:NFluent.DecimalCheckExtensions.IsStrictlyGreaterThan(NFluent.ICheck{System.Decimal},System.Decimal)">
            <summary>
            Checks that the checked value is strictly greater than the comparand.
            </summary>
            <param name="check">
            The fluent check to be extended.
            </param>
            <param name="comparand">
            Comparand to compare the value to.
            </param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">
            The checked value is not strictly greater than the comparand.
            </exception>
        </member>
        <member name="M:NFluent.DecimalCheckExtensions.IsEqualTo(NFluent.ICheck{System.Decimal},System.Decimal)">
            <summary>
            Checks that the actual value is equal to another expected value.
            </summary>
            <param name="check">
            The fluent check to be extended.
            </param>
            <param name="expected">
            The expected value.
            </param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">
            The actual value is not equal to the expected value.
            </exception>
        </member>
        <member name="T:NFluent.DecimalSignedCheckExtensions">
            <summary>
            Provides check methods to be executed on an <see cref="T:System.Decimal"/> value that is considered as a signed number.
            </summary>
        </member>
        <member name="M:NFluent.DecimalSignedCheckExtensions.IsPositive(NFluent.ICheck{System.Decimal})">
            <summary>
            Checks that the actual value is strictly positive.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The value is not strictly positive.</exception>
        </member>
        <member name="M:NFluent.DecimalSignedCheckExtensions.IsStrictlyPositive(NFluent.ICheck{System.Decimal})">
            <summary>
            Checks that the actual value is strictly positive.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The value is not strictly positive.</exception>
        </member>
        <member name="M:NFluent.DecimalSignedCheckExtensions.IsPositiveOrZero(NFluent.ICheck{System.Decimal})">
            <summary>
            Checks that the actual value is positive or equal to zero.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The value is not positive or equal to zero.</exception>
        </member>
        <member name="M:NFluent.DecimalSignedCheckExtensions.IsNegative(NFluent.ICheck{System.Decimal})">
            <summary>
            Checks that the actual value is strictly negative.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The value is not strictly negative.</exception>
        </member>
        <member name="M:NFluent.DecimalSignedCheckExtensions.IsStrictlyNegative(NFluent.ICheck{System.Decimal})">
            <summary>
            Checks that the actual value is strictly negative.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The value is not strictly negative.</exception>
        </member>
        <member name="M:NFluent.DecimalSignedCheckExtensions.IsNegativeOrZero(NFluent.ICheck{System.Decimal})">
            <summary>
            Checks that the actual value is negative or equal to zero.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The value is not negative or equal to zero.</exception>
        </member>
        <member name="T:NFluent.DoubleCheckExtensions">
            <summary>
            Provides check methods to be executed on an <see cref="T:System.Double"/> value.
            </summary>
        </member>
        <member name="M:NFluent.DoubleCheckExtensions.IsBefore(NFluent.ICheck{System.Double},System.Double)">
            <summary>
            Determines whether the specified value is before the other one.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <param name="givenValue">The other value.</param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The current value is not before the other one.</exception>
        </member>
        <member name="M:NFluent.DoubleCheckExtensions.IsAfter(NFluent.ICheck{System.Double},System.Double)">
            <summary>
            Determines whether the specified value is after the other one.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <param name="givenValue">The other value.</param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The current value is not after the other one.</exception>
        </member>
        <member name="M:NFluent.DoubleCheckExtensions.IsZero(NFluent.ICheck{System.Double})">
            <summary>
            Checks that the actual value is equal to zero.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The value is not equal to zero.</exception>
        </member>
        <member name="M:NFluent.DoubleCheckExtensions.HasAValue(NFluent.ICheck{System.Nullable{System.Double}})">
            <summary>
            Checks that the actual nullable value has a value and thus, is not null.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <returns>A check link.</returns>
            <exception cref="T:NFluent.FluentCheckException">The value is null.</exception>
        </member>
        <member name="M:NFluent.DoubleCheckExtensions.HasNoValue(NFluent.ICheck{System.Nullable{System.Double}})">
            <summary>
            Checks that the actual nullable value has no value and thus, is null. 
            Note: this method does not return A check link since the nullable is null.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <exception cref="T:NFluent.FluentCheckException">The value is not null.</exception>
        </member>
        <member name="M:NFluent.DoubleCheckExtensions.IsNotZero(NFluent.ICheck{System.Double})">
            <summary>
            Checks that the actual value is NOT equal to zero.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <returns>
              <returns>A check link.</returns>
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The value is equal to zero.</exception>
        </member>
        <member name="M:NFluent.DoubleCheckExtensions.IsLessThan(NFluent.ICheck{System.Double},System.Double)">
            <summary>
            Checks that the actual value is less than an operand.
            </summary>
            <param name="check">
            The fluent check to be extended.
            </param>
            <param name="comparand">
            Comparand to compare the value to.
            </param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">
            The value is not less than the comparand.
            </exception>
        </member>
        <member name="M:NFluent.DoubleCheckExtensions.IsStrictlyLessThan(NFluent.ICheck{System.Double},System.Double)">
            <summary>
            Checks that the checked value is strictly less than the comparand.
            </summary>
            <param name="check">
            The fluent check to be extended.
            </param>
            <param name="comparand">
            Comparand to compare the value to.
            </param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">
            The value is not strictly less than the comparand.
            </exception>
        </member>
        <member name="M:NFluent.DoubleCheckExtensions.IsGreaterThan(NFluent.ICheck{System.Double},System.Double)">
            <summary>
            Checks that the actual value is more than an operand.
            </summary>
            <param name="check">
            The fluent check to be extended.
            </param>
            <param name="comparand">
            Comparand to compare the value to.
            </param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">
            The value is not less than the comparand.
            </exception>
        </member>
        <member name="M:NFluent.DoubleCheckExtensions.IsStrictlyGreaterThan(NFluent.ICheck{System.Double},System.Double)">
            <summary>
            Checks that the checked value is strictly greater than the comparand.
            </summary>
            <param name="check">
            The fluent check to be extended.
            </param>
            <param name="comparand">
            Comparand to compare the value to.
            </param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">
            The checked value is not strictly greater than the comparand.
            </exception>
        </member>
        <member name="M:NFluent.DoubleCheckExtensions.IsEqualTo(NFluent.ICheck{System.Double},System.Double)">
            <summary>
            Checks that the actual value is equal to another expected value.
            </summary>
            <param name="check">
            The fluent check to be extended.
            </param>
            <param name="expected">
            The expected value.
            </param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">
            The actual value is not equal to the expected value.
            </exception>
        </member>
        <member name="T:NFluent.DoubleSignedCheckExtensions">
            <summary>
            Provides check methods to be executed on an <see cref="T:System.Double"/> value that is considered as a signed number.
            </summary>
        </member>
        <member name="M:NFluent.DoubleSignedCheckExtensions.IsPositive(NFluent.ICheck{System.Double})">
            <summary>
            Checks that the actual value is strictly positive.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The value is not strictly positive.</exception>
        </member>
        <member name="M:NFluent.DoubleSignedCheckExtensions.IsStrictlyPositive(NFluent.ICheck{System.Double})">
            <summary>
            Checks that the actual value is strictly positive.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The value is not strictly positive.</exception>
        </member>
        <member name="M:NFluent.DoubleSignedCheckExtensions.IsPositiveOrZero(NFluent.ICheck{System.Double})">
            <summary>
            Checks that the actual value is positive or equal to zero.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The value is not positive or equal to zero.</exception>
        </member>
        <member name="M:NFluent.DoubleSignedCheckExtensions.IsNegative(NFluent.ICheck{System.Double})">
            <summary>
            Checks that the actual value is strictly negative.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The value is not strictly negative.</exception>
        </member>
        <member name="M:NFluent.DoubleSignedCheckExtensions.IsStrictlyNegative(NFluent.ICheck{System.Double})">
            <summary>
            Checks that the actual value is strictly negative.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The value is not strictly negative.</exception>
        </member>
        <member name="M:NFluent.DoubleSignedCheckExtensions.IsNegativeOrZero(NFluent.ICheck{System.Double})">
            <summary>
            Checks that the actual value is negative or equal to zero.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The value is not negative or equal to zero.</exception>
        </member>
        <member name="T:NFluent.FloatCheckExtensions">
            <summary>
            Provides check methods to be executed on an <see cref="T:System.Single"/> value.
            </summary>
        </member>
        <member name="M:NFluent.FloatCheckExtensions.IsBefore(NFluent.ICheck{System.Single},System.Single)">
            <summary>
            Determines whether the specified value is before the other one.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <param name="givenValue">The other value.</param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The current value is not before the other one.</exception>
        </member>
        <member name="M:NFluent.FloatCheckExtensions.IsAfter(NFluent.ICheck{System.Single},System.Single)">
            <summary>
            Determines whether the specified value is after the other one.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <param name="givenValue">The other value.</param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The current value is not after the other one.</exception>
        </member>
        <member name="M:NFluent.FloatCheckExtensions.IsZero(NFluent.ICheck{System.Single})">
            <summary>
            Checks that the actual value is equal to zero.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The value is not equal to zero.</exception>
        </member>
        <member name="M:NFluent.FloatCheckExtensions.HasAValue(NFluent.ICheck{System.Nullable{System.Single}})">
            <summary>
            Checks that the actual nullable value has a value and thus, is not null.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <returns>A check link.</returns>
            <exception cref="T:NFluent.FluentCheckException">The value is null.</exception>
        </member>
        <member name="M:NFluent.FloatCheckExtensions.HasNoValue(NFluent.ICheck{System.Nullable{System.Single}})">
            <summary>
            Checks that the actual nullable value has no value and thus, is null. 
            Note: this method does not return A check link since the nullable is null.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <exception cref="T:NFluent.FluentCheckException">The value is not null.</exception>
        </member>
        <member name="M:NFluent.FloatCheckExtensions.IsNotZero(NFluent.ICheck{System.Single})">
            <summary>
            Checks that the actual value is NOT equal to zero.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <returns>
              <returns>A check link.</returns>
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The value is equal to zero.</exception>
        </member>
        <member name="M:NFluent.FloatCheckExtensions.IsLessThan(NFluent.ICheck{System.Single},System.Single)">
            <summary>
            Checks that the actual value is less than an operand.
            </summary>
            <param name="check">
            The fluent check to be extended.
            </param>
            <param name="comparand">
            Comparand to compare the value to.
            </param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">
            The value is not less than the comparand.
            </exception>
        </member>
        <member name="M:NFluent.FloatCheckExtensions.IsStrictlyLessThan(NFluent.ICheck{System.Single},System.Single)">
            <summary>
            Checks that the checked value is strictly less than the comparand.
            </summary>
            <param name="check">
            The fluent check to be extended.
            </param>
            <param name="comparand">
            Comparand to compare the value to.
            </param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">
            The value is not strictly less than the comparand.
            </exception>
        </member>
        <member name="M:NFluent.FloatCheckExtensions.IsGreaterThan(NFluent.ICheck{System.Single},System.Single)">
            <summary>
            Checks that the actual value is more than an operand.
            </summary>
            <param name="check">
            The fluent check to be extended.
            </param>
            <param name="comparand">
            Comparand to compare the value to.
            </param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">
            The value is not less than the comparand.
            </exception>
        </member>
        <member name="M:NFluent.FloatCheckExtensions.IsStrictlyGreaterThan(NFluent.ICheck{System.Single},System.Single)">
            <summary>
            Checks that the checked value is strictly greater than the comparand.
            </summary>
            <param name="check">
            The fluent check to be extended.
            </param>
            <param name="comparand">
            Comparand to compare the value to.
            </param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">
            The checked value is not strictly greater than the comparand.
            </exception>
        </member>
        <member name="M:NFluent.FloatCheckExtensions.IsEqualTo(NFluent.ICheck{System.Single},System.Single)">
            <summary>
            Checks that the actual value is equal to another expected value.
            </summary>
            <param name="check">
            The fluent check to be extended.
            </param>
            <param name="expected">
            The expected value.
            </param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">
            The actual value is not equal to the expected value.
            </exception>
        </member>
        <member name="T:NFluent.FloatSignedCheckExtensions">
            <summary>
            Provides check methods to be executed on an <see cref="T:System.Single"/> value that is considered as a signed number.
            </summary>
        </member>
        <member name="M:NFluent.FloatSignedCheckExtensions.IsPositive(NFluent.ICheck{System.Single})">
            <summary>
            Checks that the actual value is strictly positive.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The value is not strictly positive.</exception>
        </member>
        <member name="M:NFluent.FloatSignedCheckExtensions.IsStrictlyPositive(NFluent.ICheck{System.Single})">
            <summary>
            Checks that the actual value is strictly positive.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The value is not strictly positive.</exception>
        </member>
        <member name="M:NFluent.FloatSignedCheckExtensions.IsPositiveOrZero(NFluent.ICheck{System.Single})">
            <summary>
            Checks that the actual value is positive or equal to zero.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The value is not positive or equal to zero.</exception>
        </member>
        <member name="M:NFluent.FloatSignedCheckExtensions.IsNegative(NFluent.ICheck{System.Single})">
            <summary>
            Checks that the actual value is strictly negative.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The value is not strictly negative.</exception>
        </member>
        <member name="M:NFluent.FloatSignedCheckExtensions.IsStrictlyNegative(NFluent.ICheck{System.Single})">
            <summary>
            Checks that the actual value is strictly negative.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The value is not strictly negative.</exception>
        </member>
        <member name="M:NFluent.FloatSignedCheckExtensions.IsNegativeOrZero(NFluent.ICheck{System.Single})">
            <summary>
            Checks that the actual value is negative or equal to zero.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The value is not negative or equal to zero.</exception>
        </member>
        <member name="T:NFluent.FloatSpecificCheckExtensions">
            <summary>
            Provides specific check methods to be executed on an <see cref="T:System.Single"/> value.
            </summary>
        </member>
        <member name="M:NFluent.FloatSpecificCheckExtensions.IsNaN(NFluent.ICheck{System.Single})">
            <summary>
            Determines whether the specified number evaluates to a value that is not a number (NaN).
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The current value is a number.</exception>
        </member>
        <member name="M:NFluent.FloatSpecificCheckExtensions.IsFinite(NFluent.ICheck{System.Single})">
            <summary>
            Determines whether the specified number evaluates to a value that is finite (i.e. not infinity).
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The specified number evaluates to a value that is infinite (i.e. equals to infinity).</exception>
        </member>
        <member name="M:NFluent.FloatSpecificCheckExtensions.IsCloseTo(NFluent.ICheck{System.Single},System.Double,System.Double)">
            <summary>
            Determines whether the actual number is close to an expected value within a given within.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <param name="expected">The expected value.</param>
            <param name="within">The within.</param>
            <returns>A continuation check.</returns>
        </member>
        <member name="T:NFluent.LongCheckExtensions">
            <summary>
            Provides check methods to be executed on an <see cref="T:System.Int64"/> value.
            </summary>
        </member>
        <member name="M:NFluent.LongCheckExtensions.IsBefore(NFluent.ICheck{System.Int64},System.Int64)">
            <summary>
            Determines whether the specified value is before the other one.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <param name="givenValue">The other value.</param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The current value is not before the other one.</exception>
        </member>
        <member name="M:NFluent.LongCheckExtensions.IsAfter(NFluent.ICheck{System.Int64},System.Int64)">
            <summary>
            Determines whether the specified value is after the other one.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <param name="givenValue">The other value.</param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The current value is not after the other one.</exception>
        </member>
        <member name="M:NFluent.LongCheckExtensions.IsZero(NFluent.ICheck{System.Int64})">
            <summary>
            Checks that the actual value is equal to zero.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The value is not equal to zero.</exception>
        </member>
        <member name="M:NFluent.LongCheckExtensions.HasAValue(NFluent.ICheck{System.Nullable{System.Int64}})">
            <summary>
            Checks that the actual nullable value has a value and thus, is not null.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <returns>A check link.</returns>
            <exception cref="T:NFluent.FluentCheckException">The value is null.</exception>
        </member>
        <member name="M:NFluent.LongCheckExtensions.HasNoValue(NFluent.ICheck{System.Nullable{System.Int64}})">
            <summary>
            Checks that the actual nullable value has no value and thus, is null. 
            Note: this method does not return A check link since the nullable is null.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <exception cref="T:NFluent.FluentCheckException">The value is not null.</exception>
        </member>
        <member name="M:NFluent.LongCheckExtensions.IsNotZero(NFluent.ICheck{System.Int64})">
            <summary>
            Checks that the actual value is NOT equal to zero.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <returns>
              <returns>A check link.</returns>
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The value is equal to zero.</exception>
        </member>
        <member name="M:NFluent.LongCheckExtensions.IsLessThan(NFluent.ICheck{System.Int64},System.Int64)">
            <summary>
            Checks that the actual value is less than an operand.
            </summary>
            <param name="check">
            The fluent check to be extended.
            </param>
            <param name="comparand">
            Comparand to compare the value to.
            </param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">
            The value is not less than the comparand.
            </exception>
        </member>
        <member name="M:NFluent.LongCheckExtensions.IsStrictlyLessThan(NFluent.ICheck{System.Int64},System.Int64)">
            <summary>
            Checks that the checked value is strictly less than the comparand.
            </summary>
            <param name="check">
            The fluent check to be extended.
            </param>
            <param name="comparand">
            Comparand to compare the value to.
            </param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">
            The value is not strictly less than the comparand.
            </exception>
        </member>
        <member name="M:NFluent.LongCheckExtensions.IsGreaterThan(NFluent.ICheck{System.Int64},System.Int64)">
            <summary>
            Checks that the actual value is more than an operand.
            </summary>
            <param name="check">
            The fluent check to be extended.
            </param>
            <param name="comparand">
            Comparand to compare the value to.
            </param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">
            The value is not less than the comparand.
            </exception>
        </member>
        <member name="M:NFluent.LongCheckExtensions.IsStrictlyGreaterThan(NFluent.ICheck{System.Int64},System.Int64)">
            <summary>
            Checks that the checked value is strictly greater than the comparand.
            </summary>
            <param name="check">
            The fluent check to be extended.
            </param>
            <param name="comparand">
            Comparand to compare the value to.
            </param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">
            The checked value is not strictly greater than the comparand.
            </exception>
        </member>
        <member name="M:NFluent.LongCheckExtensions.IsEqualTo(NFluent.ICheck{System.Int64},System.Int64)">
            <summary>
            Checks that the actual value is equal to another expected value.
            </summary>
            <param name="check">
            The fluent check to be extended.
            </param>
            <param name="expected">
            The expected value.
            </param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">
            The actual value is not equal to the expected value.
            </exception>
        </member>
        <member name="T:NFluent.LongSignedCheckExtensions">
            <summary>
            Provides check methods to be executed on an <see cref="T:System.Int64"/> value that is considered as a signed number.
            </summary>
        </member>
        <member name="M:NFluent.LongSignedCheckExtensions.IsPositive(NFluent.ICheck{System.Int64})">
            <summary>
            Checks that the actual value is strictly positive.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The value is not strictly positive.</exception>
        </member>
        <member name="M:NFluent.LongSignedCheckExtensions.IsStrictlyPositive(NFluent.ICheck{System.Int64})">
            <summary>
            Checks that the actual value is strictly positive.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The value is not strictly positive.</exception>
        </member>
        <member name="M:NFluent.LongSignedCheckExtensions.IsPositiveOrZero(NFluent.ICheck{System.Int64})">
            <summary>
            Checks that the actual value is positive or equal to zero.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The value is not positive or equal to zero.</exception>
        </member>
        <member name="M:NFluent.LongSignedCheckExtensions.IsNegative(NFluent.ICheck{System.Int64})">
            <summary>
            Checks that the actual value is strictly negative.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The value is not strictly negative.</exception>
        </member>
        <member name="M:NFluent.LongSignedCheckExtensions.IsStrictlyNegative(NFluent.ICheck{System.Int64})">
            <summary>
            Checks that the actual value is strictly negative.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The value is not strictly negative.</exception>
        </member>
        <member name="M:NFluent.LongSignedCheckExtensions.IsNegativeOrZero(NFluent.ICheck{System.Int64})">
            <summary>
            Checks that the actual value is negative or equal to zero.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The value is not negative or equal to zero.</exception>
        </member>
        <member name="T:NFluent.SbyteCheckExtensions">
            <summary>
            Provides check methods to be executed on an <see cref="T:System.SByte"/> value.
            </summary>
        </member>
        <member name="M:NFluent.SbyteCheckExtensions.IsBefore(NFluent.ICheck{System.SByte},System.SByte)">
            <summary>
            Determines whether the specified value is before the other one.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <param name="givenValue">The other value.</param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The current value is not before the other one.</exception>
        </member>
        <member name="M:NFluent.SbyteCheckExtensions.IsAfter(NFluent.ICheck{System.SByte},System.SByte)">
            <summary>
            Determines whether the specified value is after the other one.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <param name="givenValue">The other value.</param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The current value is not after the other one.</exception>
        </member>
        <member name="M:NFluent.SbyteCheckExtensions.IsZero(NFluent.ICheck{System.SByte})">
            <summary>
            Checks that the actual value is equal to zero.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The value is not equal to zero.</exception>
        </member>
        <member name="M:NFluent.SbyteCheckExtensions.HasAValue(NFluent.ICheck{System.Nullable{System.SByte}})">
            <summary>
            Checks that the actual nullable value has a value and thus, is not null.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <returns>A check link.</returns>
            <exception cref="T:NFluent.FluentCheckException">The value is null.</exception>
        </member>
        <member name="M:NFluent.SbyteCheckExtensions.HasNoValue(NFluent.ICheck{System.Nullable{System.SByte}})">
            <summary>
            Checks that the actual nullable value has no value and thus, is null. 
            Note: this method does not return A check link since the nullable is null.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <exception cref="T:NFluent.FluentCheckException">The value is not null.</exception>
        </member>
        <member name="M:NFluent.SbyteCheckExtensions.IsNotZero(NFluent.ICheck{System.SByte})">
            <summary>
            Checks that the actual value is NOT equal to zero.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <returns>
              <returns>A check link.</returns>
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The value is equal to zero.</exception>
        </member>
        <member name="M:NFluent.SbyteCheckExtensions.IsLessThan(NFluent.ICheck{System.SByte},System.SByte)">
            <summary>
            Checks that the actual value is less than an operand.
            </summary>
            <param name="check">
            The fluent check to be extended.
            </param>
            <param name="comparand">
            Comparand to compare the value to.
            </param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">
            The value is not less than the comparand.
            </exception>
        </member>
        <member name="M:NFluent.SbyteCheckExtensions.IsStrictlyLessThan(NFluent.ICheck{System.SByte},System.SByte)">
            <summary>
            Checks that the checked value is strictly less than the comparand.
            </summary>
            <param name="check">
            The fluent check to be extended.
            </param>
            <param name="comparand">
            Comparand to compare the value to.
            </param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">
            The value is not strictly less than the comparand.
            </exception>
        </member>
        <member name="M:NFluent.SbyteCheckExtensions.IsGreaterThan(NFluent.ICheck{System.SByte},System.SByte)">
            <summary>
            Checks that the actual value is more than an operand.
            </summary>
            <param name="check">
            The fluent check to be extended.
            </param>
            <param name="comparand">
            Comparand to compare the value to.
            </param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">
            The value is not less than the comparand.
            </exception>
        </member>
        <member name="M:NFluent.SbyteCheckExtensions.IsStrictlyGreaterThan(NFluent.ICheck{System.SByte},System.SByte)">
            <summary>
            Checks that the checked value is strictly greater than the comparand.
            </summary>
            <param name="check">
            The fluent check to be extended.
            </param>
            <param name="comparand">
            Comparand to compare the value to.
            </param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">
            The checked value is not strictly greater than the comparand.
            </exception>
        </member>
        <member name="M:NFluent.SbyteCheckExtensions.IsEqualTo(NFluent.ICheck{System.SByte},System.SByte)">
            <summary>
            Checks that the actual value is equal to another expected value.
            </summary>
            <param name="check">
            The fluent check to be extended.
            </param>
            <param name="expected">
            The expected value.
            </param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">
            The actual value is not equal to the expected value.
            </exception>
        </member>
        <member name="T:NFluent.SbyteSignedCheckExtensions">
            <summary>
            Provides check methods to be executed on an <see cref="T:System.SByte"/> value that is considered as a signed number.
            </summary>
        </member>
        <member name="M:NFluent.SbyteSignedCheckExtensions.IsPositive(NFluent.ICheck{System.SByte})">
            <summary>
            Checks that the actual value is strictly positive.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The value is not strictly positive.</exception>
        </member>
        <member name="M:NFluent.SbyteSignedCheckExtensions.IsStrictlyPositive(NFluent.ICheck{System.SByte})">
            <summary>
            Checks that the actual value is strictly positive.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The value is not strictly positive.</exception>
        </member>
        <member name="M:NFluent.SbyteSignedCheckExtensions.IsPositiveOrZero(NFluent.ICheck{System.SByte})">
            <summary>
            Checks that the actual value is positive or equal to zero.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The value is not positive or equal to zero.</exception>
        </member>
        <member name="M:NFluent.SbyteSignedCheckExtensions.IsNegative(NFluent.ICheck{System.SByte})">
            <summary>
            Checks that the actual value is strictly negative.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The value is not strictly negative.</exception>
        </member>
        <member name="M:NFluent.SbyteSignedCheckExtensions.IsStrictlyNegative(NFluent.ICheck{System.SByte})">
            <summary>
            Checks that the actual value is strictly negative.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The value is not strictly negative.</exception>
        </member>
        <member name="M:NFluent.SbyteSignedCheckExtensions.IsNegativeOrZero(NFluent.ICheck{System.SByte})">
            <summary>
            Checks that the actual value is negative or equal to zero.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The value is not negative or equal to zero.</exception>
        </member>
        <member name="T:NFluent.ShortCheckExtensions">
            <summary>
            Provides check methods to be executed on an <see cref="T:System.Int16"/> value.
            </summary>
        </member>
        <member name="M:NFluent.ShortCheckExtensions.IsBefore(NFluent.ICheck{System.Int16},System.Int16)">
            <summary>
            Determines whether the specified value is before the other one.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <param name="givenValue">The other value.</param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The current value is not before the other one.</exception>
        </member>
        <member name="M:NFluent.ShortCheckExtensions.IsAfter(NFluent.ICheck{System.Int16},System.Int16)">
            <summary>
            Determines whether the specified value is after the other one.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <param name="givenValue">The other value.</param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The current value is not after the other one.</exception>
        </member>
        <member name="M:NFluent.ShortCheckExtensions.IsZero(NFluent.ICheck{System.Int16})">
            <summary>
            Checks that the actual value is equal to zero.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The value is not equal to zero.</exception>
        </member>
        <member name="M:NFluent.ShortCheckExtensions.HasAValue(NFluent.ICheck{System.Nullable{System.Int16}})">
            <summary>
            Checks that the actual nullable value has a value and thus, is not null.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <returns>A check link.</returns>
            <exception cref="T:NFluent.FluentCheckException">The value is null.</exception>
        </member>
        <member name="M:NFluent.ShortCheckExtensions.HasNoValue(NFluent.ICheck{System.Nullable{System.Int16}})">
            <summary>
            Checks that the actual nullable value has no value and thus, is null. 
            Note: this method does not return A check link since the nullable is null.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <exception cref="T:NFluent.FluentCheckException">The value is not null.</exception>
        </member>
        <member name="M:NFluent.ShortCheckExtensions.IsNotZero(NFluent.ICheck{System.Int16})">
            <summary>
            Checks that the actual value is NOT equal to zero.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <returns>
              <returns>A check link.</returns>
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The value is equal to zero.</exception>
        </member>
        <member name="M:NFluent.ShortCheckExtensions.IsLessThan(NFluent.ICheck{System.Int16},System.Int16)">
            <summary>
            Checks that the actual value is less than an operand.
            </summary>
            <param name="check">
            The fluent check to be extended.
            </param>
            <param name="comparand">
            Comparand to compare the value to.
            </param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">
            The value is not less than the comparand.
            </exception>
        </member>
        <member name="M:NFluent.ShortCheckExtensions.IsStrictlyLessThan(NFluent.ICheck{System.Int16},System.Int16)">
            <summary>
            Checks that the checked value is strictly less than the comparand.
            </summary>
            <param name="check">
            The fluent check to be extended.
            </param>
            <param name="comparand">
            Comparand to compare the value to.
            </param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">
            The value is not strictly less than the comparand.
            </exception>
        </member>
        <member name="M:NFluent.ShortCheckExtensions.IsGreaterThan(NFluent.ICheck{System.Int16},System.Int16)">
            <summary>
            Checks that the actual value is more than an operand.
            </summary>
            <param name="check">
            The fluent check to be extended.
            </param>
            <param name="comparand">
            Comparand to compare the value to.
            </param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">
            The value is not less than the comparand.
            </exception>
        </member>
        <member name="M:NFluent.ShortCheckExtensions.IsStrictlyGreaterThan(NFluent.ICheck{System.Int16},System.Int16)">
            <summary>
            Checks that the checked value is strictly greater than the comparand.
            </summary>
            <param name="check">
            The fluent check to be extended.
            </param>
            <param name="comparand">
            Comparand to compare the value to.
            </param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">
            The checked value is not strictly greater than the comparand.
            </exception>
        </member>
        <member name="M:NFluent.ShortCheckExtensions.IsEqualTo(NFluent.ICheck{System.Int16},System.Int16)">
            <summary>
            Checks that the actual value is equal to another expected value.
            </summary>
            <param name="check">
            The fluent check to be extended.
            </param>
            <param name="expected">
            The expected value.
            </param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">
            The actual value is not equal to the expected value.
            </exception>
        </member>
        <member name="T:NFluent.ShortSignedCheckExtensions">
            <summary>
            Provides check methods to be executed on an <see cref="T:System.Int16"/> value that is considered as a signed number.
            </summary>
        </member>
        <member name="M:NFluent.ShortSignedCheckExtensions.IsPositive(NFluent.ICheck{System.Int16})">
            <summary>
            Checks that the actual value is strictly positive.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The value is not strictly positive.</exception>
        </member>
        <member name="M:NFluent.ShortSignedCheckExtensions.IsStrictlyPositive(NFluent.ICheck{System.Int16})">
            <summary>
            Checks that the actual value is strictly positive.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The value is not strictly positive.</exception>
        </member>
        <member name="M:NFluent.ShortSignedCheckExtensions.IsPositiveOrZero(NFluent.ICheck{System.Int16})">
            <summary>
            Checks that the actual value is positive or equal to zero.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The value is not positive or equal to zero.</exception>
        </member>
        <member name="M:NFluent.ShortSignedCheckExtensions.IsNegative(NFluent.ICheck{System.Int16})">
            <summary>
            Checks that the actual value is strictly negative.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The value is not strictly negative.</exception>
        </member>
        <member name="M:NFluent.ShortSignedCheckExtensions.IsStrictlyNegative(NFluent.ICheck{System.Int16})">
            <summary>
            Checks that the actual value is strictly negative.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The value is not strictly negative.</exception>
        </member>
        <member name="M:NFluent.ShortSignedCheckExtensions.IsNegativeOrZero(NFluent.ICheck{System.Int16})">
            <summary>
            Checks that the actual value is negative or equal to zero.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The value is not negative or equal to zero.</exception>
        </member>
        <member name="T:NFluent.UintCheckExtensions">
            <summary>
            Provides check methods to be executed on an <see cref="T:System.UInt32"/> value.
            </summary>
        </member>
        <member name="M:NFluent.UintCheckExtensions.IsBefore(NFluent.ICheck{System.UInt32},System.UInt32)">
            <summary>
            Determines whether the specified value is before the other one.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <param name="givenValue">The other value.</param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The current value is not before the other one.</exception>
        </member>
        <member name="M:NFluent.UintCheckExtensions.IsAfter(NFluent.ICheck{System.UInt32},System.UInt32)">
            <summary>
            Determines whether the specified value is after the other one.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <param name="givenValue">The other value.</param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The current value is not after the other one.</exception>
        </member>
        <member name="M:NFluent.UintCheckExtensions.IsZero(NFluent.ICheck{System.UInt32})">
            <summary>
            Checks that the actual value is equal to zero.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The value is not equal to zero.</exception>
        </member>
        <member name="M:NFluent.UintCheckExtensions.HasAValue(NFluent.ICheck{System.Nullable{System.UInt32}})">
            <summary>
            Checks that the actual nullable value has a value and thus, is not null.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <returns>A check link.</returns>
            <exception cref="T:NFluent.FluentCheckException">The value is null.</exception>
        </member>
        <member name="M:NFluent.UintCheckExtensions.HasNoValue(NFluent.ICheck{System.Nullable{System.UInt32}})">
            <summary>
            Checks that the actual nullable value has no value and thus, is null. 
            Note: this method does not return A check link since the nullable is null.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <exception cref="T:NFluent.FluentCheckException">The value is not null.</exception>
        </member>
        <member name="M:NFluent.UintCheckExtensions.IsNotZero(NFluent.ICheck{System.UInt32})">
            <summary>
            Checks that the actual value is NOT equal to zero.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <returns>
              <returns>A check link.</returns>
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The value is equal to zero.</exception>
        </member>
        <member name="M:NFluent.UintCheckExtensions.IsLessThan(NFluent.ICheck{System.UInt32},System.UInt32)">
            <summary>
            Checks that the actual value is less than an operand.
            </summary>
            <param name="check">
            The fluent check to be extended.
            </param>
            <param name="comparand">
            Comparand to compare the value to.
            </param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">
            The value is not less than the comparand.
            </exception>
        </member>
        <member name="M:NFluent.UintCheckExtensions.IsStrictlyLessThan(NFluent.ICheck{System.UInt32},System.UInt32)">
            <summary>
            Checks that the checked value is strictly less than the comparand.
            </summary>
            <param name="check">
            The fluent check to be extended.
            </param>
            <param name="comparand">
            Comparand to compare the value to.
            </param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">
            The value is not strictly less than the comparand.
            </exception>
        </member>
        <member name="M:NFluent.UintCheckExtensions.IsGreaterThan(NFluent.ICheck{System.UInt32},System.UInt32)">
            <summary>
            Checks that the actual value is more than an operand.
            </summary>
            <param name="check">
            The fluent check to be extended.
            </param>
            <param name="comparand">
            Comparand to compare the value to.
            </param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">
            The value is not less than the comparand.
            </exception>
        </member>
        <member name="M:NFluent.UintCheckExtensions.IsStrictlyGreaterThan(NFluent.ICheck{System.UInt32},System.UInt32)">
            <summary>
            Checks that the checked value is strictly greater than the comparand.
            </summary>
            <param name="check">
            The fluent check to be extended.
            </param>
            <param name="comparand">
            Comparand to compare the value to.
            </param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">
            The checked value is not strictly greater than the comparand.
            </exception>
        </member>
        <member name="M:NFluent.UintCheckExtensions.IsEqualTo(NFluent.ICheck{System.UInt32},System.UInt32)">
            <summary>
            Checks that the actual value is equal to another expected value.
            </summary>
            <param name="check">
            The fluent check to be extended.
            </param>
            <param name="expected">
            The expected value.
            </param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">
            The actual value is not equal to the expected value.
            </exception>
        </member>
        <member name="T:NFluent.UlongCheckExtensions">
            <summary>
            Provides check methods to be executed on an <see cref="T:System.UInt64"/> value.
            </summary>
        </member>
        <member name="M:NFluent.UlongCheckExtensions.IsBefore(NFluent.ICheck{System.UInt64},System.UInt64)">
            <summary>
            Determines whether the specified value is before the other one.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <param name="givenValue">The other value.</param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The current value is not before the other one.</exception>
        </member>
        <member name="M:NFluent.UlongCheckExtensions.IsAfter(NFluent.ICheck{System.UInt64},System.UInt64)">
            <summary>
            Determines whether the specified value is after the other one.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <param name="givenValue">The other value.</param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The current value is not after the other one.</exception>
        </member>
        <member name="M:NFluent.UlongCheckExtensions.IsZero(NFluent.ICheck{System.UInt64})">
            <summary>
            Checks that the actual value is equal to zero.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The value is not equal to zero.</exception>
        </member>
        <member name="M:NFluent.UlongCheckExtensions.HasAValue(NFluent.ICheck{System.Nullable{System.UInt64}})">
            <summary>
            Checks that the actual nullable value has a value and thus, is not null.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <returns>A check link.</returns>
            <exception cref="T:NFluent.FluentCheckException">The value is null.</exception>
        </member>
        <member name="M:NFluent.UlongCheckExtensions.HasNoValue(NFluent.ICheck{System.Nullable{System.UInt64}})">
            <summary>
            Checks that the actual nullable value has no value and thus, is null. 
            Note: this method does not return A check link since the nullable is null.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <exception cref="T:NFluent.FluentCheckException">The value is not null.</exception>
        </member>
        <member name="M:NFluent.UlongCheckExtensions.IsNotZero(NFluent.ICheck{System.UInt64})">
            <summary>
            Checks that the actual value is NOT equal to zero.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <returns>
              <returns>A check link.</returns>
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The value is equal to zero.</exception>
        </member>
        <member name="M:NFluent.UlongCheckExtensions.IsLessThan(NFluent.ICheck{System.UInt64},System.UInt64)">
            <summary>
            Checks that the actual value is less than an operand.
            </summary>
            <param name="check">
            The fluent check to be extended.
            </param>
            <param name="comparand">
            Comparand to compare the value to.
            </param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">
            The value is not less than the comparand.
            </exception>
        </member>
        <member name="M:NFluent.UlongCheckExtensions.IsStrictlyLessThan(NFluent.ICheck{System.UInt64},System.UInt64)">
            <summary>
            Checks that the checked value is strictly less than the comparand.
            </summary>
            <param name="check">
            The fluent check to be extended.
            </param>
            <param name="comparand">
            Comparand to compare the value to.
            </param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">
            The value is not strictly less than the comparand.
            </exception>
        </member>
        <member name="M:NFluent.UlongCheckExtensions.IsGreaterThan(NFluent.ICheck{System.UInt64},System.UInt64)">
            <summary>
            Checks that the actual value is more than an operand.
            </summary>
            <param name="check">
            The fluent check to be extended.
            </param>
            <param name="comparand">
            Comparand to compare the value to.
            </param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">
            The value is not less than the comparand.
            </exception>
        </member>
        <member name="M:NFluent.UlongCheckExtensions.IsStrictlyGreaterThan(NFluent.ICheck{System.UInt64},System.UInt64)">
            <summary>
            Checks that the checked value is strictly greater than the comparand.
            </summary>
            <param name="check">
            The fluent check to be extended.
            </param>
            <param name="comparand">
            Comparand to compare the value to.
            </param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">
            The checked value is not strictly greater than the comparand.
            </exception>
        </member>
        <member name="M:NFluent.UlongCheckExtensions.IsEqualTo(NFluent.ICheck{System.UInt64},System.UInt64)">
            <summary>
            Checks that the actual value is equal to another expected value.
            </summary>
            <param name="check">
            The fluent check to be extended.
            </param>
            <param name="expected">
            The expected value.
            </param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">
            The actual value is not equal to the expected value.
            </exception>
        </member>
        <member name="T:NFluent.UshortCheckExtensions">
            <summary>
            Provides check methods to be executed on an <see cref="T:System.UInt16"/> value.
            </summary>
        </member>
        <member name="M:NFluent.UshortCheckExtensions.IsBefore(NFluent.ICheck{System.UInt16},System.UInt16)">
            <summary>
            Determines whether the specified value is before the other one.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <param name="givenValue">The other value.</param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The current value is not before the other one.</exception>
        </member>
        <member name="M:NFluent.UshortCheckExtensions.IsAfter(NFluent.ICheck{System.UInt16},System.UInt16)">
            <summary>
            Determines whether the specified value is after the other one.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <param name="givenValue">The other value.</param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The current value is not after the other one.</exception>
        </member>
        <member name="M:NFluent.UshortCheckExtensions.IsZero(NFluent.ICheck{System.UInt16})">
            <summary>
            Checks that the actual value is equal to zero.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The value is not equal to zero.</exception>
        </member>
        <member name="M:NFluent.UshortCheckExtensions.HasAValue(NFluent.ICheck{System.Nullable{System.UInt16}})">
            <summary>
            Checks that the actual nullable value has a value and thus, is not null.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <returns>A check link.</returns>
            <exception cref="T:NFluent.FluentCheckException">The value is null.</exception>
        </member>
        <member name="M:NFluent.UshortCheckExtensions.HasNoValue(NFluent.ICheck{System.Nullable{System.UInt16}})">
            <summary>
            Checks that the actual nullable value has no value and thus, is null. 
            Note: this method does not return A check link since the nullable is null.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <exception cref="T:NFluent.FluentCheckException">The value is not null.</exception>
        </member>
        <member name="M:NFluent.UshortCheckExtensions.IsNotZero(NFluent.ICheck{System.UInt16})">
            <summary>
            Checks that the actual value is NOT equal to zero.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <returns>
              <returns>A check link.</returns>
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The value is equal to zero.</exception>
        </member>
        <member name="M:NFluent.UshortCheckExtensions.IsLessThan(NFluent.ICheck{System.UInt16},System.UInt16)">
            <summary>
            Checks that the actual value is less than an operand.
            </summary>
            <param name="check">
            The fluent check to be extended.
            </param>
            <param name="comparand">
            Comparand to compare the value to.
            </param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">
            The value is not less than the comparand.
            </exception>
        </member>
        <member name="M:NFluent.UshortCheckExtensions.IsStrictlyLessThan(NFluent.ICheck{System.UInt16},System.UInt16)">
            <summary>
            Checks that the checked value is strictly less than the comparand.
            </summary>
            <param name="check">
            The fluent check to be extended.
            </param>
            <param name="comparand">
            Comparand to compare the value to.
            </param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">
            The value is not strictly less than the comparand.
            </exception>
        </member>
        <member name="M:NFluent.UshortCheckExtensions.IsGreaterThan(NFluent.ICheck{System.UInt16},System.UInt16)">
            <summary>
            Checks that the actual value is more than an operand.
            </summary>
            <param name="check">
            The fluent check to be extended.
            </param>
            <param name="comparand">
            Comparand to compare the value to.
            </param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">
            The value is not less than the comparand.
            </exception>
        </member>
        <member name="M:NFluent.UshortCheckExtensions.IsStrictlyGreaterThan(NFluent.ICheck{System.UInt16},System.UInt16)">
            <summary>
            Checks that the checked value is strictly greater than the comparand.
            </summary>
            <param name="check">
            The fluent check to be extended.
            </param>
            <param name="comparand">
            Comparand to compare the value to.
            </param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">
            The checked value is not strictly greater than the comparand.
            </exception>
        </member>
        <member name="M:NFluent.UshortCheckExtensions.IsEqualTo(NFluent.ICheck{System.UInt16},System.UInt16)">
            <summary>
            Checks that the actual value is equal to another expected value.
            </summary>
            <param name="check">
            The fluent check to be extended.
            </param>
            <param name="expected">
            The expected value.
            </param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">
            The actual value is not equal to the expected value.
            </exception>
        </member>
    </members>
</doc>
